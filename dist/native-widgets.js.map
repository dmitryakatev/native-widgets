{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/core/components/component.ts","webpack:///./src/core/components/internal.ts","webpack:///./src/core/index.ts","webpack:///./src/core/modules/dom.ts","webpack:///./src/core/modules/event/emitter.event.ts","webpack:///./src/core/modules/event/helper.event.ts","webpack:///./src/core/modules/event/store.event.ts","webpack:///./src/core/modules/lifecycle.ts","webpack:///./src/core/modules/template.ts","webpack:///./src/core/util/dom.ts","webpack:///./src/core/util/event.ts","webpack:///./src/core/util/util.ts","webpack:///./src/index.scss?3e7a","webpack:///./src/index.ts","webpack:///./src/widgets/grid/grid.ts","webpack:///./src/widgets/grid/headgrid/headgrid.html","webpack:///./src/widgets/grid/headgrid/headgrid.ts","webpack:///./src/widgets/grid/plugins/dragDrop/dragDropPlugin.ts","webpack:///./src/widgets/grid/plugins/resizeColumns/resizeColumnsPlugin.ts","webpack:///./src/widgets/grid/plugins/supportSticky.ts","webpack:///./src/widgets/grid/plugins/total/container.ts","webpack:///./src/widgets/grid/plugins/total/totalPlugin.ts","webpack:///./src/widgets/grid/plugins/viewColumns/ViewColumnsPlugin.ts","webpack:///./src/widgets/grid/plugins/viewColumns/settingsGrid.ts","webpack:///./src/widgets/grid/viewgrid/viewgrid.html","webpack:///./src/widgets/grid/viewgrid/viewgrid.ts","webpack:///./src/widgets/icons.ts","webpack:///./src/widgets/tree/headtree/headtree.ts","webpack:///./src/widgets/tree/plugins/pinRow/Row.ts","webpack:///./src/widgets/tree/plugins/pinRow/container.ts","webpack:///./src/widgets/tree/plugins/pinRow/pinRowPlugin.ts","webpack:///./src/widgets/tree/plugins/treeFilter/treeFilterPlugin.ts","webpack:///./src/widgets/tree/tree.ts","webpack:///./src/widgets/tree/viewtree/viewtree.ts","webpack:///./src/widgets/utils/util.ts"],"names":[],"mappings":"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","file":"./native-widgets.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","\r\nimport { Internal, IRef } from \"./internal\";\r\nimport { lifecycle } from \"./../modules/lifecycle\";\r\nimport { ITemplate } from \"./../modules/template\";\r\nimport { dom } from \"./../modules/dom\";\r\nimport { appendChild, insertAfter, insertBefore, removeChild } from \"./../util/dom\";\r\nimport { merge, methodCall, IHashMap, IHashMapString, IHashMapBoolean, IHashMapAny } from \"./../util/util\";\r\n\r\nexport type IComponent = Component<IComponentProps>;\r\n\r\nexport interface IComponentProps {\r\n    events?: IHashMapAny;\r\n}\r\n\r\nexport function on(ref: string, eventName: string): any {\r\n    return (ctor: any, methodName: string) => {\r\n        if (!ctor.constructor.events) {\r\n            ctor.constructor.events = [];\r\n        }\r\n\r\n        ctor.constructor.events.push({ ref, eventName, methodName });\r\n    };\r\n}\r\n\r\nexport class Component<\r\n        TProps extends IComponentProps,\r\n        R extends Component<IComponentProps> = Component<IComponentProps, any>\r\n    > {\r\n\r\n    public static template: ITemplate;\r\n\r\n    public $internal: Internal;\r\n    public parent: R;\r\n    public props: TProps;\r\n\r\n    constructor(props?: TProps, parent?: R) {\r\n        this.parent = parent ? parent : null;\r\n        this.props = props || ({} as TProps);\r\n\r\n        this.$internal = new Internal(this);\r\n        this.$internal.init();\r\n    }\r\n\r\n    // >>> работа с компонентом\r\n\r\n    // добавляет компонент внутрь элемента\r\n    public appendChild(node: HTMLElement): void {\r\n        lifecycle.start(() => {\r\n            this.$internal.onRender();\r\n            appendChild(node, this.$internal.node);\r\n        });\r\n    }\r\n\r\n    // добавляет компонент после элемента\r\n    public insertAfter(node: HTMLElement): void {\r\n        lifecycle.start(() => {\r\n            this.$internal.onRender();\r\n            insertAfter(node, this.$internal.node);\r\n        });\r\n    }\r\n\r\n    // добавляет компонент перед элементом\r\n    public insertBefore(node: HTMLElement): void {\r\n        lifecycle.start(() => {\r\n            this.$internal.onRender();\r\n            insertBefore(node, this.$internal.node);\r\n        });\r\n    }\r\n\r\n    // удаляет компонент\r\n    public remove(): void {\r\n        lifecycle.start((depth: number) => {\r\n            if (depth === 1) {\r\n                let node: Node = this.$internal.node;\r\n                this.$internal.onDestroy();\r\n                removeChild(node);\r\n                node = null;\r\n            } else {\r\n                this.$internal.onDestroy();\r\n            }\r\n        });\r\n    }\r\n\r\n    // проверяет, был ли компонент прорендерен\r\n    public isRendered(): boolean {\r\n        return !!this.$internal.node;\r\n    }\r\n\r\n    // >>> работа с событиями\r\n\r\n    // добавляет событие\r\n    public on(eventName: string, fn: (...args: any[]) => void): void {\r\n        this.$internal.emitter.on(eventName, fn);\r\n    }\r\n\r\n    // удаляет событие\r\n    public off(eventName: string, fn: (...args: any[]) => void): void {\r\n        this.$internal.emitter.off(eventName, fn);\r\n    }\r\n\r\n    // вызывает событие\r\n    public emit(\r\n            eventName: string,\r\n            a1?: any,\r\n            a2?: any,\r\n            a3?: any,\r\n            a4?: any,\r\n            a5?: any,\r\n            a6?: any,\r\n            a7?: any,\r\n            a8?: any,\r\n            a9?: any,\r\n            a10?: any\r\n        ): boolean {\r\n        let args: any[] = [arguments[0], this];\r\n\r\n        let ln: number = arguments.length;\r\n        for (let i: number = 1; i < ln; ++i) {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        methodCall(this.$internal.emitter, \"emit\", args);\r\n        return true; // TODO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    }\r\n\r\n    // >>> работа с виртуальным DOM\r\n    // устанавливает свойства на DOM элемент\r\n    protected prop(ref: string, value: IHashMapString, reset?: boolean): void {\r\n        this.setAttr(ref, \"prop\", value, reset);\r\n    }\r\n\r\n    // устанавливает атрибуты на DOM элемент\r\n    protected attr(ref: string, value: IHashMapString, reset?: boolean): void {\r\n        this.setAttr(ref, \"attr\", value, reset);\r\n    }\r\n\r\n    // устанавливает классы на DOM элемент\r\n    protected cl(ref: string, value: IHashMapBoolean, reset?: boolean): void {\r\n        this.setAttr(ref, \"cl\", value, reset);\r\n    }\r\n\r\n    // устанавливает стили на DOM элемент\r\n    protected css(ref: string, value: IHashMapString, reset?: boolean): void {\r\n        this.setAttr(ref, \"css\", value, reset);\r\n    }\r\n\r\n    // получает реальный DOM по его имени\r\n    protected ref(name: string): HTMLElement {\r\n        if (this.$internal.refs.hasOwnProperty(name)) {\r\n            return this.$internal.refs[name].node;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private setAttr(ref: string, key: string, value: IHashMapAny, reset?: boolean): void {\r\n        let refs: IHashMap<IRef> = this.$internal.refs;\r\n\r\n        if (!refs.hasOwnProperty(ref)) {\r\n            refs[ref] = { node: null, dom: { prop: {}, attr: {}, cl: {}, css: {} } };\r\n        }\r\n\r\n        let r: IRef = refs[ref];\r\n\r\n        if (r.node) {\r\n            dom[key](r.node, r.dom[key], value, reset);\r\n        } else {\r\n            if (reset) {\r\n                r.dom[key] = value; // need save reset\r\n            } else {\r\n                merge(r.dom[key], value);\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\nimport { Component, IComponentProps } from \"./component\";\r\n\r\nimport { lifecycle } from \"./../modules/lifecycle\";\r\nimport { ITemplate } from \"./../modules/template\";\r\nimport { dom, IDom } from \"./../modules/dom\";\r\nimport { EmitterEvent, EventFn } from \"./../modules/event/emitter.event\";\r\nimport { StoreEvent } from \"./../modules/event/store.event\";\r\n\r\nimport { methodCall, IHashMap, IHashMapString, IHashMapBoolean } from \"./../util/util\";\r\n\r\nexport interface IRef {\r\n    node: HTMLElement;\r\n    dom: IDom;\r\n}\r\n\r\ninterface IEventInfo {\r\n    ref: string;\r\n    eventName: string;\r\n    methodName: string;\r\n}\r\n\r\nexport class Internal {\r\n\r\n    protected static autoId: number = 100000;\r\n\r\n    public id: number;\r\n    public owner: any; // todo\r\n\r\n    public refs: IHashMap<IRef>;   // ссылки на Node элементы\r\n    public storeEvent: StoreEvent; // хранилище событий\r\n    public emitter: EmitterEvent;  // хранилище искусственных событий\r\n\r\n    public node?: Node;\r\n\r\n    constructor(component: Component<IComponentProps>) {\r\n        ++Internal.autoId;\r\n\r\n        this.id = Internal.autoId;\r\n        this.owner = component;\r\n        this.node = null;\r\n        this.refs = {};\r\n    }\r\n\r\n    public init(): void {\r\n        let ctor: any = this.owner.constructor;\r\n        let template: ITemplate = ctor.template;\r\n\r\n        this.emitter = new EmitterEvent();\r\n        this.storeEvent = new StoreEvent();\r\n\r\n        lifecycle.run(this, lifecycle.METHODS.BEFORE_INIT);\r\n\r\n        let refRoot = template.root.ref;\r\n        if (template.root.attr) {\r\n            this.owner.attr(refRoot, template.root.attr);\r\n        }\r\n\r\n        if (template.root.cl) {\r\n            this.owner.cl(refRoot, template.root.cl);\r\n        }\r\n\r\n        if (template.root.css) {\r\n            this.owner.css(refRoot, template.root.css);\r\n        }\r\n\r\n        lifecycle.run(this, lifecycle.METHODS.AFTER_INIT);\r\n    }\r\n\r\n    // internal\r\n    public safeMethodCall(methodName: string, args: any[] = []): void {\r\n        if (this.owner[methodName]) {\r\n            try {\r\n                methodCall(this.owner, methodName, args);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onRender(): void {\r\n        let ctor: any = this.owner.constructor;\r\n        let template: ITemplate = ctor.template;\r\n        let tagName: string = template.root.tagName;\r\n        let el: HTMLElement = document.createElement(tagName);\r\n\r\n        el.innerHTML = template.html;\r\n        this.node = el;\r\n\r\n        this.initRefs(template);\r\n        this.initEvents(ctor.events);\r\n\r\n        lifecycle.run(this, lifecycle.METHODS.BEFORE_MOUNT);\r\n        lifecycle.add(this, lifecycle.METHODS.AFTER_MOUNT);\r\n    }\r\n\r\n    public onDestroy(): void {\r\n        lifecycle.run(this, lifecycle.METHODS.BEFORE_UNMOUNT);\r\n\r\n        this.refs = {};\r\n        this.node = null;\r\n        this.storeEvent.clean();\r\n\r\n        lifecycle.add(this, lifecycle.METHODS.AFTER_UNMOUNT);\r\n    }\r\n\r\n    private initRefs(template: ITemplate): void {\r\n        let el: HTMLElement = this.node as HTMLElement;\r\n        let refs: NodeList = el.querySelectorAll(`[ref]`);\r\n\r\n        this.initRef(template.root.ref, el);\r\n\r\n        Array.prototype.forEach.call(refs, (node: HTMLElement) => {\r\n            let ref: string = node.getAttribute(`ref`);\r\n\r\n            node.removeAttribute(\"ref\");\r\n            this.initRef(ref, node);\r\n        });\r\n    }\r\n\r\n    private initRef(name: string, node: HTMLElement): void {\r\n        let currRef: IRef = { node, dom: dom.init(node) };\r\n        let nextRef: IRef = this.refs[name];\r\n\r\n        if (nextRef) {\r\n            dom.attr(node, currRef.dom.attr, nextRef.dom.attr, false);\r\n            dom.cl(node, currRef.dom.cl, nextRef.dom.cl, false);\r\n            dom.css(node, currRef.dom.css, nextRef.dom.css, false);\r\n        }\r\n\r\n        this.storeEvent.add(name, currRef.node);\r\n        this.refs[name] = currRef;\r\n    }\r\n\r\n    private initEvents(events: IEventInfo[]): void {\r\n        if (events) {\r\n            events.forEach((eventInfo: IEventInfo) => {\r\n                let event = this.createEvent(eventInfo.methodName, eventInfo.ref);\r\n                this.storeEvent.on(eventInfo.ref, eventInfo.eventName, event);\r\n            });\r\n        }\r\n    }\r\n\r\n    private createEvent(methodName: string, ref: string): any {\r\n        return (event: MouseEvent) => {\r\n            this.safeMethodCall(methodName, [event, this.owner.ref(ref)]);\r\n        };\r\n    }\r\n}\r\n","\r\nimport { Component, on, IComponentProps } from \"./components/component\";\r\nimport { IRef } from \"./components/internal\";\r\nimport { template } from \"./modules/template\";\r\n\r\nimport { dom, IDom } from \"./modules/dom\";\r\nimport { EmitterEvent } from \"./modules/event/emitter.event\";\r\nimport { StoreEvent } from \"./modules/event/store.event\";\r\n\r\nimport { methodCall, merge } from \"./util/util\";\r\nimport { IHashMap, IHashMapAny, IHashMapBoolean, IHashMapString } from \"./util/util\";\r\nimport { event } from \"./util/event\";\r\n\r\n// -------------------------------------------\r\n\r\nexport { Component, on, IComponentProps, IRef, template };\r\n\r\nexport { EmitterEvent, StoreEvent };\r\nexport { dom, IDom };\r\n\r\nexport { IHashMap, IHashMapAny, IHashMapBoolean, IHashMapString };\r\n\r\nexport { event, merge, methodCall };\r\n","\r\nimport { camelize, uncamelize } from \"./../util/util\";\r\nimport { IHashMap, IHashMapAny, IHashMapString, IHashMapBoolean } from \"./../util/util\";\r\n\r\nexport interface IDom {\r\n    id?: number;             // id тега\r\n    name?: string;           // имя тега\r\n    prop?: IHashMapString;   // свойства\r\n    attr?: IHashMapString;   // атрибуты\r\n    cl?: IHashMapBoolean;    // классы\r\n    css?: IHashMapString;    // стили\r\n    children?: IDom[];       // дочерние элементы\r\n    text?: string;           // текст внутри тега\r\n\r\n    [propName: string]: any; // произвольный набор параметров (рендериться не будет)\r\n}\r\n\r\n// класс для работы с виртуальным DOM\r\n\r\nclass Dom {\r\n\r\n    // создает виртуальный DOM для Node\r\n    public init(node: HTMLElement): IDom {\r\n        let attr: IHashMapString = {};\r\n        let cl: IHashMapBoolean = {};\r\n        let css: IHashMapString = {};\r\n\r\n        let attribute: Attr;\r\n        let prop: string;\r\n        let value: string;\r\n\r\n        let ln: number = node.attributes.length;\r\n        for (let i = 0; i < ln; ++i) {\r\n            attribute = node.attributes[i];\r\n\r\n            prop = attribute.name;\r\n            value = attribute.nodeValue;\r\n\r\n            if (prop === \"class\") {\r\n                this.processingClasses(cl, value.split(\" \"));\r\n            } else {\r\n                if (prop === `style`) {\r\n                    this.processingStyles(css, value.split(\";\"));\r\n                } else {\r\n                    attr[prop] = value;\r\n                }\r\n            }\r\n        }\r\n\r\n        return { prop: attr, attr, cl, css };\r\n    }\r\n\r\n    // обновляет разметку в соответствии с виртуальным DOM\r\n    public update(node: HTMLElement, currDom: IDom = {}, nextDom: IDom): void {\r\n        this.attr(node, currDom.attr || {}, nextDom.attr || {}, true);\r\n        this.cl(node, currDom.cl || {}, nextDom.cl || {}, true);\r\n        this.css(node, currDom.css || {}, nextDom.css || {}, true);\r\n\r\n        if (nextDom.children) {\r\n            if (!currDom.children) {\r\n                currDom.children = [];\r\n            }\r\n\r\n            this.updateChildren(node, currDom, nextDom);\r\n        } else {\r\n            if (currDom.text !== nextDom.text) {\r\n                node.innerHTML = nextDom.text;\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateChildren(node: HTMLElement, currDom: IDom, nextDom: IDom): void {\r\n        let nodeHash: IHashMap<HTMLElement> = {};\r\n        let currDomHash: IHashMap<IDom> = {};\r\n        let nextDomHash: IHashMap<IDom> = {};\r\n\r\n        currDom.children.forEach((d: IDom, index: number) => {\r\n            nodeHash[d.id] = node.children[index] as HTMLElement;\r\n            currDomHash[d.id] = d;\r\n        });\r\n\r\n        nextDom.children.forEach((d: IDom, index: number) => {\r\n            nextDomHash[d.id] = d;\r\n        });\r\n\r\n        currDom.children.forEach((d: IDom) => {\r\n            if (!nextDomHash.hasOwnProperty(d.id)) {\r\n                let child: HTMLElement = nodeHash[d.id];\r\n                node.removeChild(child);\r\n            }\r\n        });\r\n\r\n        nextDom.children.forEach((d: IDom, index: number) => {\r\n            let child: HTMLElement;\r\n\r\n            if (nodeHash.hasOwnProperty(d.id)) {\r\n                child = nodeHash[d.id];\r\n            } else {\r\n                child = document.createElement(d.name);\r\n            }\r\n\r\n            this.update(child, currDomHash[d.id], d);\r\n\r\n            if (index < node.children.length) {\r\n                let target: Node = node.children[index];\r\n\r\n                if (child !== target) {\r\n                    node.insertBefore(child, target);\r\n                }\r\n            } else {\r\n                node.appendChild(child);\r\n            }\r\n        });\r\n    }\r\n\r\n    // изменение свойств\r\n\r\n    public attr(element: HTMLElement, original: IHashMapString, changes: IHashMapString, reset: boolean): void {\r\n        let value: string;\r\n        let key: string;\r\n\r\n        if (reset) {\r\n            for (key in original) {\r\n                if (!changes.hasOwnProperty(key)) {\r\n                    element.removeAttribute(key);\r\n                }\r\n            }\r\n\r\n            for (key in changes) {\r\n                if (changes.hasOwnProperty(key)) {\r\n                    value = changes[key];\r\n\r\n                    if (original[key] !== value) {\r\n                        element.setAttribute(key, value);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (key in changes) {\r\n                if (changes.hasOwnProperty(key)) {\r\n                    value = changes[key];\r\n\r\n                    if (original[key] !== value) {\r\n                        original[key] = value;\r\n\r\n                        element.setAttribute(key, value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public prop(element: HTMLElement, original: IHashMapAny, changes: IHashMapAny, reset: boolean): void {\r\n        let value: string;\r\n        let key: string;\r\n\r\n        if (reset) {\r\n            for (key in original) {\r\n                if (!changes.hasOwnProperty(key)) {\r\n                    element[key] = null;\r\n                }\r\n            }\r\n\r\n            for (key in changes) {\r\n                if (changes.hasOwnProperty(key)) {\r\n                    element[key] = changes[key];\r\n                }\r\n            }\r\n        } else {\r\n            for (key in changes) {\r\n                if (changes.hasOwnProperty(key)) {\r\n                    value = changes[key];\r\n\r\n                    if (original[key] !== value) {\r\n                        original[key] = value;\r\n\r\n                        element[key] = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public cl(element: HTMLElement, original: IHashMapAny, changes: IHashMapAny, reset: boolean): void {\r\n        let value: string = \"\";\r\n        let klass: string;\r\n\r\n        if (reset) {\r\n            original = changes;\r\n        } else {\r\n            for (klass in changes) {\r\n                if (changes.hasOwnProperty(klass)) {\r\n                    if (original[klass] !== changes[klass]) {\r\n                        original[klass] = changes[klass];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (klass in original) {\r\n            if (original[klass] === true) {\r\n                if (value.length === 0) {\r\n                    value = klass;\r\n                } else {\r\n                    value += ` ${klass}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (value.length === 0) {\r\n            element.removeAttribute(\"class\");\r\n        } else {\r\n            element.setAttribute(\"class\", value);\r\n        }\r\n    }\r\n\r\n    public css(element: HTMLElement, original: IHashMapAny, changes: IHashMapAny, reset: boolean): void {\r\n        let value: string;\r\n        let key: string;\r\n\r\n        if (reset) {\r\n            for (key in original) {\r\n                if (!changes.hasOwnProperty(key)) {\r\n                    element.style[key] = null;\r\n                }\r\n            }\r\n\r\n            for (key in changes) {\r\n                if (changes.hasOwnProperty(key)) {\r\n                    element.style[key] = changes[key];\r\n                }\r\n            }\r\n        } else {\r\n            for (key in changes) {\r\n                if (changes.hasOwnProperty(key)) {\r\n                    value = changes[key];\r\n\r\n                    if (original[key] !== value) {\r\n                        original[key] = value;\r\n\r\n                        element.style[key] = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private processingClasses(target: IHashMapBoolean, classes: string[]): void {\r\n        let cl: string;\r\n        let i: number;\r\n\r\n        let ln: number = classes.length;\r\n        for (i = 0; i < ln; ++i) {\r\n            cl = classes[i].trim();\r\n\r\n            if (cl.length > 0) {\r\n                target[cl] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private processingStyles(target: IHashMapString, styles: string[]): void {\r\n        let style: string|string[];\r\n        let value: string;\r\n        let i: number;\r\n\r\n        let ln: number = styles.length;\r\n        for (i = 0; i < ln; ++i) {\r\n            style = styles[i].split(\":\");\r\n\r\n            if (style.length === 2) {\r\n                value = style[1].trim();\r\n                style = style[0].trim();\r\n\r\n                if (style.length && value.length) {\r\n                    target[camelize(style)] = value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const dom = new Dom();\r\n","\r\nimport { HelperEvent, EventFn, IEventList } from \"./helper.event\";\r\nimport { methodCall, IHashMap } from \"./../../util/util\";\r\n\r\ninterface IEventListEmitter extends IEventList {\r\n    registered?: boolean;\r\n}\r\n\r\nexport { EventFn };\r\n\r\nexport class EmitterEvent {\r\n\r\n    public readonly events: IHashMap<IEventListEmitter>;\r\n\r\n    constructor() {\r\n        this.events = {};\r\n    }\r\n\r\n    public on(eventName: string, fn: EventFn): boolean {\r\n        return HelperEvent.on(this.events, eventName, fn);\r\n    }\r\n\r\n    public off(eventName: string, fn: EventFn): boolean {\r\n        return HelperEvent.off(this.events, eventName, fn);\r\n    }\r\n\r\n    public emit(eventName: string, ...args: any[]): void {\r\n        if (this.events.hasOwnProperty(eventName)) {\r\n            const list: EventFn[] = this.events[eventName] as EventFn[];\r\n\r\n            const ln: number = list.length;\r\n            for (let i: number = 0; i < ln; ++i) {\r\n                methodCall(list, i, args);\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\nimport { CODE, IHashMap, IHashMapBoolean } from \"./../../util/util\";\r\n\r\nexport type EventFn = (...args: any[]) => void;\r\n\r\nlet eventKey: string = `__store__event__${CODE}`;\r\nlet eventNum: number = 0;\r\n\r\nexport interface IEventList extends Array<EventFn> {\r\n    hash: IHashMapBoolean;\r\n}\r\n\r\nexport interface IStoreEvents extends IHashMap<IEventList> { }\r\n\r\nexport class HelperEvent {\r\n\r\n    public static on(events: IStoreEvents, eventName: string, fn: EventFn): boolean {\r\n        let eventList: IEventList;\r\n\r\n        if (events.hasOwnProperty(eventName)) {\r\n            eventList = events[eventName];\r\n        } else {\r\n            eventList = HelperEvent.createEventList();\r\n            events[eventName] = eventList;\r\n        }\r\n\r\n        if (!fn.hasOwnProperty(eventKey)) {\r\n            fn[eventKey] = ++eventNum;\r\n        }\r\n\r\n        if (eventList.hash.hasOwnProperty(fn[eventKey])) {\r\n            return false;\r\n        }\r\n\r\n        eventList.hash[fn[eventKey]] = true;\r\n        eventList.push(fn);\r\n\r\n        return true;\r\n    }\r\n\r\n    public static off(events: IStoreEvents, eventName: string, fn: EventFn): boolean {\r\n        if (events.hasOwnProperty(eventName) && fn.hasOwnProperty(eventKey)) {\r\n            let eventList: IEventList = events[eventName];\r\n            let key: number = fn[eventKey];\r\n\r\n            if (eventList.hash.hasOwnProperty(key)) {\r\n                delete eventList.hash[key];\r\n\r\n                let newEventList: IEventList = HelperEvent.createEventList();\r\n                let ln: number = eventList.length;\r\n\r\n                for (let i: number = 0; i < ln; ++i) {\r\n                    if (eventList[i][eventNum] !== key) {\r\n                        newEventList.push(eventList[i]);\r\n                    }\r\n                }\r\n\r\n                newEventList.hash = eventList.hash;\r\n                events[eventName] = newEventList;\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static createEventList(): IEventList {\r\n        let eventList: IEventList = [] as IEventList;\r\n        eventList.hash = {};\r\n        return eventList;\r\n    }\r\n}\r\n","\r\nimport { HelperEvent, EventFn, IStoreEvents } from \"./helper.event\";\r\nimport { event, SimpleEventFn } from \"./../../util/event\";\r\nimport { IHashMap } from \"./../../util/util\";\r\n\r\nexport class StoreEvent {\r\n\r\n    private nodes: IHashMap<Node>;\r\n    private store: IHashMap<IStoreEvents>;\r\n\r\n    constructor() {\r\n        this.clean();\r\n    }\r\n\r\n    public add(key: string, node: Node): void {\r\n        this.nodes[key] = node;\r\n    }\r\n\r\n    public clean(): void {\r\n        this.nodes = {};\r\n        this.store = {};\r\n    }\r\n\r\n    public on(key: string, eventName: string, fn: SimpleEventFn): boolean {\r\n        if (!this.store.hasOwnProperty(key)) {\r\n            this.store[key] = {};\r\n        }\r\n\r\n        if (HelperEvent.on(this.store[key], eventName, fn)) {\r\n            if (this.nodes) {\r\n                event.on(this.nodes[key], { [eventName]: fn });\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public off(key: string, eventName: string, fn: SimpleEventFn): boolean {\r\n        if (this.store.hasOwnProperty(key)) {\r\n            if (HelperEvent.off(this.store[key], eventName, fn)) {\r\n                if (this.nodes) {\r\n                    event.off(this.nodes[key], { [eventName]: fn });\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","\r\nimport { Internal } from \"./../components/internal\";\r\n\r\ninterface ICallback {\r\n    internal: Internal;\r\n    method: string;\r\n}\r\n\r\nclass Lifecycle {\r\n\r\n    public readonly METHODS = {\r\n        BEFORE_INIT: \"beforeInit\",\r\n        AFTER_INIT: \"afterInit\",\r\n\r\n        BEFORE_MOUNT: \"beforeMount\",\r\n        AFTER_MOUNT: \"afterMount\",\r\n\r\n        BEFORE_UNMOUNT: \"beforeUnmount\",\r\n        AFTER_UNMOUNT: \"afterUnmount\"\r\n    };\r\n\r\n    private list: ICallback[] = [];\r\n    private depth: number = 0;\r\n\r\n    public run(internal: Internal, method: string): void {\r\n        internal.safeMethodCall(method);\r\n    }\r\n\r\n    public add(internal: Internal, method: string): void {\r\n        if (internal.owner[method]) {\r\n            this.list.push({ internal, method });\r\n        }\r\n    }\r\n\r\n    public start(callback: (depth?: number) => void): void {\r\n        ++this.depth;\r\n\r\n        callback(this.depth);\r\n\r\n        --this.depth;\r\n\r\n        if (this.depth === 0 && this.list.length > 0) {\r\n            this.list.forEach((cb: ICallback) => {\r\n                cb.internal.safeMethodCall(cb.method);\r\n            });\r\n\r\n            this.list = [];\r\n        }\r\n    }\r\n}\r\n\r\nexport const lifecycle = new Lifecycle();\r\n","\r\nimport { CODE, IHashMapString, IHashMapBoolean } from \"./../util/util\";\r\n\r\nexport interface ITemplate {\r\n    html: string;\r\n    root?: IRoot;\r\n}\r\n\r\ninterface IRoot {\r\n    tagName: string;\r\n    ref?: string;\r\n    attr?: IHashMapString;\r\n    cl?: IHashMapBoolean;\r\n    css?: IHashMapString;\r\n}\r\n\r\nexport function template(config: ITemplate): (ctor: any) => void {\r\n    return (ctor: any) => {\r\n        ctor.template = config;\r\n\r\n        if (!config.root.ref) {\r\n            config.root.ref = `root_${CODE}`;\r\n        }\r\n\r\n        if (config.html) {\r\n            let strings: string[] = config.html.split(/\\n/g);\r\n            config.html = strings.map((str) => str.trim()).join(``);\r\n        }\r\n    };\r\n}\r\n","\r\nexport function appendChild(parent: Node, node: Node): void {\r\n    parent.appendChild(node);\r\n}\r\n\r\nexport function insertBefore(node: Node, target: Node): void {\r\n    node.parentNode.insertBefore(target, node);\r\n}\r\n\r\nexport function insertAfter(node: Node, target: Node): void {\r\n    if (node.nextSibling) {\r\n        insertBefore(node.nextSibling, target);\r\n    } else {\r\n        appendChild(node.parentNode, target);\r\n    }\r\n}\r\n\r\nexport function removeChild(node: Node): void {\r\n    node.parentNode.removeChild(node);\r\n}\r\n","\r\nimport { IHashMap } from \"./util\";\r\n\r\nexport type SimpleEventFn = (event: Event) => void;\r\n\r\ntype Listeners = IHashMap<SimpleEventFn> | IHashMap<SimpleEventFn[]>;\r\n\r\ntype ActionEvent = (el: Node, listeners: Listeners) => void;\r\n\r\ninterface IEvent {\r\n    on: ActionEvent;\r\n    off: ActionEvent;\r\n}\r\n\r\nexport const event: IEvent = {\r\n    on(el: Node, listeners: Listeners): void {\r\n        let events: SimpleEventFn[];\r\n\r\n        for (let eventName in listeners) {\r\n            if (listeners.hasOwnProperty(eventName)) {\r\n                events = listeners[eventName] as SimpleEventFn[];\r\n\r\n                if (Array.isArray(events)) {\r\n                    let ln: number = events.length;\r\n                    for (let i: number = 0; i < ln; ++i) {\r\n                        el.addEventListener(eventName, events[i], false);\r\n                    }\r\n                } else {\r\n                    el.addEventListener(eventName, events as SimpleEventFn, false);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    off(el: Node, listeners: Listeners): void {\r\n        let events: SimpleEventFn[];\r\n\r\n        for (let eventName in listeners) {\r\n            if (listeners.hasOwnProperty(eventName)) {\r\n                events = listeners[eventName] as SimpleEventFn[];\r\n\r\n                if (Array.isArray(events)) {\r\n                    let ln: number = events.length;\r\n                    for (let i: number = 0; i < ln; ++i) {\r\n                        el.removeEventListener(eventName, events[i], false);\r\n                    }\r\n                } else {\r\n                    el.removeEventListener(eventName, events as SimpleEventFn, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n","\r\nexport interface IHashMap<T> {\r\n    [propName: string]: T;\r\n}\r\n\r\nexport interface IHashMapAny extends IHashMap<any> { }\r\nexport interface IHashMapNumber extends IHashMap<number> { }\r\nexport interface IHashMapString extends IHashMap<string> { }\r\nexport interface IHashMapBoolean extends IHashMap<boolean> { }\r\n\r\n// -------------------------------------------\r\n\r\nexport function merge(to: IHashMapAny, a1: IHashMapAny): IHashMapAny {\r\n    let obj: IHashMapAny;\r\n    let key: string;\r\n\r\n    const ln: number = arguments.length;\r\n    for (let i: number = 1; i < ln; ++i) {\r\n        obj = arguments[i];\r\n\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                to[key] = obj[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return to;\r\n}\r\n\r\n// -------------------------------------------\r\n\r\nconst calls = {\r\n    0: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method]();\r\n    },\r\n    1: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0]);\r\n    },\r\n    2: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0], args[1]);\r\n    },\r\n    3: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0], args[1], args[2]);\r\n    },\r\n    4: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0], args[1], args[2], args[3]);\r\n    },\r\n    5: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0], args[1], args[2], args[3], args[4]);\r\n    },\r\n    6: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0], args[1], args[2], args[3], args[4], args[5]);\r\n    },\r\n    7: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\r\n    },\r\n    8: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\r\n    },\r\n    9: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);\r\n    },\r\n    10: (inst: IHashMapAny, method: string | number, args: any[]): void => {\r\n        return inst[method](args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);\r\n    }\r\n};\r\n\r\nexport function methodCall(inst: IHashMapAny, method: string | number, args: any[]): any {\r\n    if (args.length < 11) {\r\n        return calls[args.length](inst, method, args);\r\n    } else {\r\n        return inst[method].apply(inst, args);\r\n    }\r\n}\r\n\r\n// -------------------------------------------\r\n\r\nconst num: number = Math.random() * 10000000000;\r\nlet random: string = Math.floor(num).toString(32);\r\nexport const CODE = random.substr(random.length - 5);\r\n\r\n// -------------------------------------------\r\n\r\nconst camelizeReg: RegExp = /[\\-]([\\w])/;\r\nfunction camelizeFn(token: string) {\r\n    return token[1].toUpperCase();\r\n}\r\n\r\nexport function camelize(str: string): string {\r\n    return str.replace(camelizeReg, camelizeFn);\r\n}\r\n\r\nconst uncamelizeReg: RegExp = /([A-Z])/;\r\nfunction uncamelizeFn(token: string) {\r\n    return `-${token.toLowerCase()}`;\r\n}\r\n\r\nexport function uncamelize(str: string): string {\r\n    return str.replace(uncamelizeReg, uncamelizeFn);\r\n}\r\n","// extracted by mini-css-extract-plugin","\r\nimport { Grid } from \"./widgets/grid/grid\";\r\nimport { Tree, INode } from \"./widgets/tree/tree\";\r\nimport { IMeta } from \"./widgets/grid/viewgrid/viewgrid\";\r\n\r\nimport { DragDropPlugin } from \"./widgets/grid/plugins/dragDrop/dragDropPlugin\";\r\nimport { ResizeColumnsPlugin } from \"./widgets/grid/plugins/resizeColumns/resizeColumnsPlugin\";\r\nimport { TotalPlugin } from \"./widgets/grid/plugins/total/totalPlugin\";\r\nimport { ViewColumnsPlugin } from \"./widgets/grid/plugins/viewColumns/ViewColumnsPlugin\";\r\nimport { TreeFilterPlugin } from \"./widgets/tree/plugins/treeFilter/treeFilterPlugin\";\r\nimport { PinRowPlugin } from \"./widgets/tree/plugins/pinRow/pinRowPlugin\";\r\n\r\nimport \"./index.scss\";\r\n\r\nGrid.registerPlugin({ type: \"dragDropGrid\", plugin: DragDropPlugin });\r\nGrid.registerPlugin({ type: \"resizeColumns\", plugin: ResizeColumnsPlugin });\r\nGrid.registerPlugin({ type: \"total\", plugin: TotalPlugin });\r\nGrid.registerPlugin({ type: \"viewColumns\", plugin: ViewColumnsPlugin });\r\nGrid.registerPlugin({ type: \"treeFilter\", plugin: TreeFilterPlugin });\r\nGrid.registerPlugin({ type: \"pinRow\", plugin: PinRowPlugin });\r\n\r\n(window as any).nw = {\r\n    Grid,\r\n    Tree\r\n};\r\n","\r\nimport { Component, template, IComponentProps, methodCall, IHashMapBoolean } from \"core\";\r\nimport { IHashMap, IHashMapAny } from \"core\";\r\n\r\nimport { HeadGrid, IColumn, IHeadProps } from \"./headgrid/headgrid\";\r\nimport { ViewGrid, IViewProps } from \"./viewgrid/viewgrid\";\r\nimport { IPluginConstructor, IRegisterPlugin, IPlugin, IPluginProps } from \"./plugins/Plugin\";\r\nimport { isNumber } from \"./../utils/util\";\r\n\r\nexport interface IGridProps<T> extends IComponentProps {\r\n    columns?: IColumn<T>[];\r\n    data?: T[] | T;\r\n    plugins?: IPluginProps[];\r\n    hideHead?: boolean;\r\n\r\n    width?: number;\r\n    height?: number;\r\n\r\n    getId?: (item: T) => any;     // получает id зааписи\r\n\r\n    multiSelect?: boolean;\r\n    emptyRowText?: string;\r\n\r\n    bufferEnable?: boolean;\r\n    bufferHeight?: number;\r\n    bufferStock?: number;\r\n    bufferScrollMin?: number;\r\n}\r\n\r\nexport interface IPluginItem {\r\n    type: string;\r\n    plugin: IPlugin;\r\n}\r\n\r\n@template({\r\n    html: \"\",\r\n    root: {\r\n        tagName: \"div\",\r\n        ref: \"grid\",\r\n        cl: {\r\n            ngrid: true\r\n        }\r\n    }\r\n})\r\nexport class Grid<\r\n        T extends IHashMapAny = IHashMapAny,\r\n        P extends IGridProps<T> = IGridProps<T>\r\n    > extends Component<P> {\r\n\r\n    public static plugins: IHashMap<IRegisterPlugin<any>> = {};\r\n    public static registerPlugin(plugin: IRegisterPlugin<any>): void {\r\n        this.plugins[plugin.type] = plugin;\r\n    }\r\n\r\n    /* tslint:disable:member-ordering */\r\n    public static REFS = {\r\n        GRID: \"grid\"\r\n    };\r\n    /* tslint:enable:member-ordering */\r\n\r\n    protected head: HeadGrid<T, IHeadProps<T>, Grid<T>>; // шапка таблицы\r\n    protected view: ViewGrid<T, IViewProps<T>, Grid<T>>; // контент таблицы\r\n\r\n    protected plugins: IPluginItem[];\r\n\r\n    // получает экземпляр класса заголовка\r\n    public getHead(): HeadGrid<T> {\r\n        return this.head;\r\n    }\r\n\r\n    // получает экземпляр класса контента\r\n    public getView(): ViewGrid<T> {\r\n        return this.view;\r\n    }\r\n\r\n    // показывает шапку таблицы\r\n    public showHead(): void {\r\n        this.cl(Grid.REFS.GRID, { \"head-hidden\": false });\r\n        this.props.hideHead = false;\r\n    }\r\n\r\n    // скрывает шапку таблицы\r\n    public hideHead(): void {\r\n        this.cl(Grid.REFS.GRID, { \"head-hidden\": true });\r\n        this.props.hideHead = true;\r\n    }\r\n\r\n    // ищет колонки\r\n    public findColumns(fn: (column: IColumn<T>) => boolean): IColumn<T>[] {\r\n        return this.head.findColumns(fn);\r\n    }\r\n\r\n    // ищет колонку\r\n    public findColumn(fn: (column: IColumn<T>) => boolean): IColumn<T> {\r\n        return this.head.findColumn(fn);\r\n    }\r\n\r\n    // получает список колонок\r\n    public getColumns(): IColumn<T>[] {\r\n        return this.props.columns;\r\n    }\r\n\r\n    public getPlugin(type: string): IPlugin {\r\n        let plugins: IPluginItem[] = this.plugins.filter((plugin: IPluginItem) => plugin.type === type);\r\n        if (plugins.length > 0) {\r\n            return plugins[0].plugin;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // загружает данные в таблицу\r\n    public loadData(data: T[] | T): void {\r\n        if (!Array.isArray(data)) {\r\n            data = Object.prototype.toString.call(data) === \"[object Object]\" ? [data] : [];\r\n        }\r\n\r\n        this.view.loadData(data as T[]);\r\n    }\r\n\r\n    // получает все данные\r\n    public getData(): T[] {\r\n        return this.view.getData();\r\n    }\r\n\r\n    // получает модель данных по id\r\n    public getRowById(id: any): T {\r\n        return this.view.getRowById(id);\r\n    }\r\n\r\n    // формирует шапку у таблицы\r\n    public reconfigure(columns: IColumn<T, Grid<T>>[]): void {\r\n        this.head.reconfigure(columns);\r\n    }\r\n\r\n    // обновляет ширину у каждого столбца\r\n    public refreshColSize(): void {\r\n        this.head.refreshColSize();\r\n    }\r\n\r\n    // возвращает список выбранных строк\r\n    public getSelected(): T[] {\r\n        return this.view.getSelected();\r\n    }\r\n\r\n    // устанавливает выделенные строки\r\n    public doSelect(data: T | T[]): void {\r\n        this.view.doSelect(data);\r\n    }\r\n\r\n    // устанавливает скролл на указанную позицию\r\n    public scrollTo(scrollTop?: number, scrollLeft?: number): void {\r\n        this.view.scrollTo(scrollTop, scrollLeft);\r\n    }\r\n\r\n    // скроллит таблицу до указанной записи\r\n    public scrollBy(data: T, isTop: boolean = true): void {\r\n        this.view.scrollBy(data, isTop);\r\n    }\r\n\r\n    // устанавливает ширину в таблице\r\n    public setWidth(width: number): void {\r\n        this.props.width = width;\r\n        this.css(Grid.REFS.GRID, { width: width === null ? null : `${width}px` });\r\n    }\r\n\r\n    // устанавливает высоту в таблице\r\n    public setHeight(height: number): void {\r\n        this.props.height = height;\r\n        this.css(Grid.REFS.GRID, { height: height === null ? null : `${height}px` });\r\n    }\r\n\r\n    public setCl(cl: IHashMapBoolean): void {\r\n        this.cl(Grid.REFS.GRID, cl);\r\n    }\r\n\r\n    // устанавливает чек в таблице\r\n    public setCheck(data: T, checked: boolean): void {\r\n        (data as any).checked = checked; // TODO\r\n\r\n        this.emit(\"checkchange\", data, checked);\r\n    }\r\n\r\n    // обновляет таблицу\r\n    public refresh(): void {\r\n        this.view.refresh();\r\n    }\r\n\r\n    // находит record по NODE узлу\r\n    public getRecordByEl(el: HTMLElement): T {\r\n        return this.view.getRecordByEl(el);\r\n    }\r\n\r\n    // находит column по NODE узлу\r\n    public getHeaderByEl(el: HTMLElement): IColumn<T> {\r\n        return this.head.getHeaderByEl(el);\r\n    }\r\n\r\n    // обновляет строку у таблицы по записи\r\n    public updateRowByData(data: T): void {\r\n        this.view.updateRowByData(data);\r\n    }\r\n\r\n    // обновляет строку у таблицы по id\r\n    public updateRowById(idRow: any): void {\r\n        this.view.updateRowById(idRow);\r\n    }\r\n\r\n    // ----------------------------------------------------\r\n\r\n    // перед инициализацией. здесь мы устанавливаем значения по умолчанию\r\n    // если их не передали в параметрах, при создании компонента\r\n    protected beforeInit(): void {\r\n\r\n        if (!this.props.getId) {\r\n            this.props.getId = (item: any) => item.id;\r\n        }\r\n\r\n        // добавляем события\r\n\r\n        function cellMouseDown_Grid(\r\n            grid: Grid<T>,\r\n            td: HTMLTableCellElement,\r\n            columnIndex: number,\r\n            data: T,\r\n            tr: HTMLTableRowElement,\r\n            rowIndex: number,\r\n            event: MouseEvent,\r\n            column: IColumn<T, Grid<T>>\r\n        ) {\r\n            if (column.xtype === \"checkcolumn\") {\r\n                let dataIndex: string = column.dataIndex || \"checked\";\r\n                let model: any = this.props.getData(data);\r\n                let checked: boolean = model[dataIndex];\r\n\r\n                grid.setCheck(data, !checked);\r\n            } else {\r\n                grid.view.doSelect([data], event.ctrlKey);\r\n            }\r\n        }\r\n\r\n        this.on(\"onCellMouseDown\", cellMouseDown_Grid);\r\n    }\r\n\r\n    // после инициализации. создаем дочерние компоненты\r\n    protected afterInit(): void {\r\n        this.setWidth(isNumber(this.props.width) ? this.props.width : null);\r\n        this.setHeight(isNumber(this.props.height) ? this.props.height : null);\r\n\r\n        this.initHead();\r\n        this.initView();\r\n\r\n        if (this.props.hideHead) {\r\n            this.hideHead();\r\n        }\r\n\r\n        // добавим шапку таблицы для синхронизации с контентом\r\n        // т.к. шапка и контент это два разных тега <table>\r\n        // им нужно задавать одинаковые ширины колонок,\r\n        // для этого и нужна синхронизация\r\n        this.view.addSyncTable(this.head);\r\n\r\n        this.initPlugins();\r\n\r\n        this.loadData(this.props.data);\r\n    }\r\n\r\n    // перед рендерингом. говорим какие дочерние компоненты должны рендериться\r\n    protected beforeMount(): void {\r\n        this.head.appendChild(this.ref(Grid.REFS.GRID));\r\n        this.view.appendChild(this.ref(Grid.REFS.GRID));\r\n\r\n        this.mountPlugins();\r\n    }\r\n\r\n    // после рендеринга. стартуем обновлять нашу таблицу\r\n    protected afterMount(): void {\r\n        this.head.reconfigure(this.props.columns);\r\n        this.view.asyncUpdateSize();\r\n    }\r\n\r\n    protected beforeUnmount(): void {\r\n        this.unmountPlugins();\r\n\r\n        this.head.remove();\r\n        this.view.remove();\r\n\r\n        this.head = null;\r\n        this.view = null;\r\n    }\r\n\r\n    protected initHead(): void {\r\n        this.head = new HeadGrid<T, IHeadProps<T>, Grid<T>>({\r\n            columns: this.props.columns\r\n        }, this);\r\n    }\r\n\r\n    protected initView(): void {\r\n        this.view = new ViewGrid<T, IViewProps<T>, Grid<T>>({\r\n            data: this.props.data,\r\n            getId: this.props.getId,\r\n\r\n            columns: [],\r\n\r\n            multiSelect: this.props.multiSelect,\r\n            emptyRowText: this.props.emptyRowText,\r\n\r\n            bufferEnable: this.props.bufferEnable,\r\n            bufferHeight: this.props.bufferHeight,\r\n            bufferStock: this.props.bufferStock,\r\n            bufferScrollMin: this.props.bufferScrollMin\r\n        }, this);\r\n    }\r\n\r\n    // --- плагины\r\n\r\n    // инициализация плагинов\r\n    private initPlugins(): void {\r\n        this.plugins = (this.props.plugins || []).map((pluginProps: IPluginProps) => {\r\n            let plugin: IPlugin = null;\r\n\r\n            if (Grid.plugins.hasOwnProperty(pluginProps.type)) {\r\n                let Ctor: IPluginConstructor<T> = Grid.plugins[pluginProps.type].plugin;\r\n\r\n                try {\r\n                    plugin = new Ctor(pluginProps, this);\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n            }\r\n\r\n            return { type: pluginProps.type, plugin };\r\n        });\r\n    }\r\n\r\n    // рендеринг плагинов\r\n    private mountPlugins(): void {\r\n        this.plugins.forEach((pluginItem: IPluginItem) => {\r\n            let plugin: IPlugin = pluginItem.plugin;\r\n            let MOUNT: string = \"mount\";\r\n\r\n            if (plugin && plugin[MOUNT]) {\r\n                methodCall(pluginItem.plugin, MOUNT, []);\r\n            }\r\n        });\r\n    }\r\n\r\n    // демонтирование плагинов\r\n    private unmountPlugins(): void {\r\n        this.plugins.forEach((pluginItem: IPluginItem) => {\r\n            let plugin: IPlugin = pluginItem.plugin;\r\n            let UNMOUNT: string = \"unmount\";\r\n\r\n            if (plugin && plugin[UNMOUNT]) {\r\n                methodCall(pluginItem.plugin, UNMOUNT, []);\r\n            }\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<div ref=\\\"content\\\" class=\\\"wrap-content\\\">\\n    <table ref=\\\"table\\\">\\n        <colgroup ref=\\\"cols\\\"></colgroup>\\n        <tbody ref=\\\"body\\\"></tbody>\\n    </table>\\n</div>\";","\r\nimport { Component, template, IComponentProps, on, IHashMapBoolean } from \"core\";\r\nimport { dom, IDom, methodCall } from \"core\";\r\nimport { IHashMap, IHashMapAny } from \"core\";\r\nimport { Grid } from \"./../grid\";\r\nimport { ViewGrid, IMeta } from \"./../viewgrid/viewgrid\";\r\nimport { isNumber, findParentNode } from \"./../../utils/util\";\r\nimport { ICONS, createIcon } from \"./../../icons\";\r\n\r\n// параметры которые можно передавать внутрь компонента\r\nexport interface IHeadProps<T, R extends Grid<T> = Grid<T>> extends IComponentProps {\r\n    columns: IColumn<T, R>[];  // список колонок в таблице\r\n}\r\n\r\n// функция renderer в колонке IColumn\r\nexport type Render<T, R extends Grid<T> = Grid<T>> = (value: any, meta: IMeta<T, R>, data: T) => string;\r\n\r\n// парамерты колонки\r\nexport interface IColumn<T, R extends Grid<T> = Grid<T>> {\r\n    id?: number;               // private !!!\r\n    xtype?: string;            // тип колонки (basecolumn)\r\n    text?: string;             // надпись в колонке ('')\r\n    width?: number;            // ширина колонки (100)\r\n    minWidth?: number;         // минимальная ширина колонки (0)\r\n    flex?: number;             // ширина колонки в пропорции. если задан flex, то параметр width игнорируется (null)\r\n    cls?: string;              // класс который будет добавлен в колонку\r\n    tdCls?: IHashMapBoolean;   // класс, который будет добавлен в ячейку данных ('')\r\n    align?: string;            // форматирование (отображать: слева, справа, по центру) (null - 'left')\r\n    accuracyClick?: boolean;   // точный клик по ячейке, будет проигнорировано событие click и dblclick,\r\n                               // если координаты по событиям MouseDown и Click не совпадают (false)\r\n    dataIndex?: string;        // ключ, для быстрого доступа к данным (null)\r\n    renderer?: Render<T, R>;   // функция для рендера ячейки (null)\r\n    columns?: IColumn<T, R>[]; // дочерние колонки (для многоуровневой шапки) (null)\r\n    resizable?: boolean;       // возможность изменять ширину колонки (false)\r\n    sortable?: boolean;        // возможность сортировать колонку (false)\r\n    direction?: Direction;     // направление сортировки в таблице (null)\r\n    tooltip?: string;          // тултип для колонки\r\n    [propName: string]: any;   // другие произвольные параметры, которые можно записать в колонку\r\n}\r\n\r\n// направление сортировки\r\ntype Direction = \"ASC\" | \"DESC\";\r\n\r\n// -------------------------------------------\r\n// интерфейсы для внутренней работы компонента\r\n\r\n// функция рендера\r\ntype FnRender<T, R extends Grid<T>> = (data: T, meta: IMeta<T, R>) => string;\r\ninterface IColumnType<T, R extends Grid<T>> {\r\n    xtype: string;             // тип колонки\r\n    renderer: FnRender<T, R>;  // функция рендера для этого типа колонки\r\n}\r\n\r\n@template({\r\n    html: require(\"./headgrid.html\"),\r\n    root: {\r\n        tagName: \"div\",\r\n        ref: \"head\",\r\n        cl: {\r\n            \"ngrid-head\": true\r\n        }\r\n    }\r\n})\r\nexport class HeadGrid<\r\n        T extends IHashMapAny = IHashMapAny,\r\n        P extends IHeadProps<T> = IHeadProps<T>,\r\n        R extends Grid<T> = Grid<T>\r\n    > extends Component<P, R> {\r\n\r\n    public static columnId: number = 1000;\r\n\r\n    public static columns: IHashMap<IColumnType<IHashMapAny, Grid<IHashMapAny>>> = {};\r\n    public static registerColumn(column: IColumnType<IHashMapAny, Grid<IHashMapAny>>): void {\r\n        this.columns[column.xtype] = column;\r\n    }\r\n\r\n    /* tslint:disable:member-ordering */\r\n    public static REFS = {\r\n        HEAD: \"head\",\r\n        CONTENT: \"content\",\r\n        TABLE: \"table\",\r\n        COLS: \"cols\",\r\n        BODY: \"body\"\r\n    };\r\n    /* tslint:enable:member-ordering */\r\n\r\n    private headerDom: IDom;\r\n    private colsDom: IDom;\r\n\r\n    private columnsDown: IColumn<T, R>[];\r\n    private useFlexColumns: boolean;\r\n\r\n    public beforeInit(): void {\r\n        this.useFlexColumns = false;\r\n        this.colsDom = null;\r\n\r\n        this.columnsDown = [];\r\n        this.headerDom = {\r\n            name: \"tbody\",\r\n            children: []\r\n        };\r\n    }\r\n\r\n    // ищет колонки\r\n    public findColumns(fn: (column: IColumn<T, R>) => boolean): IColumn<T, R>[] {\r\n        let result: IColumn<T, R>[] = [];\r\n\r\n        let columns: IColumn<T, R>[] = this.props.columns as IColumn<T, R>[];\r\n        this.eachColumn(columns, (column: IColumn<T, R>) => {\r\n            if (fn(column)) {\r\n                result.push(column);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    // ищет колонку\r\n    public findColumn(fn: (column: IColumn<T, R>) => boolean): IColumn<T, R> {\r\n        return this.findColumns(fn)[0] || null;\r\n    }\r\n\r\n    // делает сортировку по колонке. пока не реализовано :(\r\n    public sortByColumn(column: IColumn<T, R>, direction?: Direction): void {\r\n        /*if (column.sortable) {\r\n            // список колонок, которые можем сотрировать\r\n            let columns = this.headerNodesDown.map((nodeTd) => {\r\n                return nodeTd.tplData.column;\r\n            });\r\n\r\n            // сбрасываем сортировку у других колонок\r\n            columns.forEach((c) => {\r\n                if (c.id !== column.id) {\r\n                    c.direction = null;\r\n                }\r\n            });\r\n\r\n            // если указано явное направление сортировки, то выставляем ее\r\n            // иначе делаем инверсию относительно этой же колонки\r\n            if (direction) {\r\n                column.direction = direction;\r\n            } else {\r\n                column.direction = column.direction === 'ASC' ? 'DESC' : 'ASC';\r\n            }\r\n\r\n            let grid = this.ownerCt;\r\n\r\n            if (column.valueSort) {\r\n                grid.getStore().sort({\r\n                    fn (record1, record2) {\r\n                        let v1 = column.valueSort.call(grid, record1, column);\r\n                        let v2 = column.valueSort.call(grid, record2, column);\r\n\r\n                        if (v1 === v2) {\r\n                            return 0;\r\n                        }\r\n\r\n                        return v1 > v2 ? 1 : -1;\r\n                    },\r\n                    direction: column.direction\r\n                });\r\n            } else {\r\n                if (column.dataIndex) {\r\n                    grid.getStore().sort({\r\n                        property: column.dataIndex,\r\n                        direction: column.direction\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.updateHeader();\r\n            grid.fireEvent('sortchange', grid, column, column.direction);\r\n        }*/\r\n    }\r\n\r\n    // изменяет шапку у таблицы\r\n    public reconfigure(columns: IColumn<T, R>[]): void {\r\n        this.initColumns(columns || []);\r\n\r\n        if (this.isRendered()) {\r\n            this.updateHeader();\r\n            this.refreshColSize();\r\n        }\r\n    }\r\n\r\n    // обновляет ширину у каждого столбца\r\n    public refreshColSize(): void {\r\n        let grid: Grid<T> = this.parent;\r\n        let view: ViewGrid<T> = grid.getView();\r\n        // - когда таблица не была прорендерена;\r\n        // - когда талица скрыта \"display: none\";\r\n        // - когда колонок в таблице нет;\r\n        // обновлять ничего не будем\r\n        if (!this.isRendered() || !view.getWidth() || this.columnsDown.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let { useFlex, colsDom } = this.getColsDom();\r\n        let syncTableList: Component<any>[] = view.getSyncTableList();\r\n        let updateList: Component<any>[] = ([view] as Component<any>[]).concat(syncTableList);\r\n        let ref: string = ViewGrid.REFS.COLS;\r\n        let defaultColsDom: IDom = {\r\n            name: \"colgroup\",\r\n            children: []\r\n        };\r\n\r\n        updateList.forEach((component: Component<any>) => {\r\n            let colgroup: HTMLElement = methodCall(component, \"ref\", [ref]);\r\n            let cols: IDom = colgroup.children.length > 0 ? this.colsDom : defaultColsDom;\r\n\r\n            if (colgroup) {\r\n                dom.update(colgroup, cols, colsDom);\r\n            }\r\n        });\r\n\r\n        this.useFlexColumns = useFlex;\r\n        this.colsDom = colsDom;\r\n\r\n        view.refresh();\r\n    }\r\n\r\n    // находит column по NODE узлу\r\n    public getHeaderByEl(el: HTMLElement): IColumn<T, R> {\r\n        let div: HTMLDivElement = this.ref(HeadGrid.REFS.HEAD) as HTMLDivElement;\r\n        let nodeTd: HTMLTableDataCellElement = findParentNode(el, \"td\", div) as HTMLTableDataCellElement;\r\n\r\n        if (nodeTd) {\r\n            let index: number = parseInt(nodeTd.getAttribute(\"data-index\"), 10);\r\n            return this.columnsDown[index];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getTdByEl(el: HTMLElement): HTMLTableDataCellElement {\r\n        return findParentNode(el, \"td\", this.ref(HeadGrid.REFS.HEAD)) as HTMLTableDataCellElement;\r\n    }\r\n\r\n    public getColumnByTd(td: HTMLTableDataCellElement, goDown?: boolean): IColumn<T, R> {\r\n        if (td) {\r\n            // находим id колонки по которой кликнули\r\n            let columnId: number = parseInt(td.getAttribute(\"data-num\"), 10);\r\n            // находим колонку по которой кликнули\r\n            let column: IColumn<T, R> = this.findColumn((c) => c.id === columnId);\r\n\r\n            if (column) {\r\n                if (goDown) {\r\n                    while (column.columns && column.columns.length > 0) {\r\n                        column = column.columns[column.columns.length - 1];\r\n                    }\r\n                }\r\n\r\n                return column;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // возвращает нижний ряд с колонками\r\n    public getColumnsDown(): IColumn<T, R>[] {\r\n        return this.columnsDown;\r\n    }\r\n\r\n    public isUseFlex(): boolean {\r\n        return this.useFlexColumns;\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // приватные методы для работы с заголовком таблицы\r\n\r\n    // инициализация колонок\r\n    private initColumns(columns: IColumn<T, R>[]): void {\r\n        this.columnsDown = [];\r\n\r\n        this.eachColumn(columns, (column) => {\r\n            // у каждой колонки должден быть тип,\r\n            // по этому типу будет производиться рендеринг данных\r\n            // если тип не задан, то устанавливаем по умолчанию\r\n            if (!column.xtype) { column.xtype = \"basecolumn\"; }\r\n            if (!isNumber(column.id)) { column.id = ++HeadGrid.columnId; }\r\n            if (!column.text) { column.text = \"\"; }\r\n            if (!column.tdCls) { column.tdCls = null; }\r\n            if (!column.align) { column.align = null; }\r\n            if (!column.dataIndex) { column.dataIndex = null; }\r\n            if (!column.renderer) { column.renderer = null; }\r\n            if (!column.columns) { column.columns = null; }\r\n            if (!column.tooltip) { column.tooltip = null; }\r\n            if (!column.accuracyClick) { column.accuracyClick = false; }\r\n\r\n            if (column.columns) {\r\n                column.resizable = false;\r\n                column.sortable = false;\r\n                column.minWidth = null;\r\n                column.width = null;\r\n                column.flex = null;\r\n            } else {\r\n                column.resizable = column.resizable !== false;\r\n                column.sortable = column.sortable !== false;\r\n                column.minWidth = column.minWidth ? column.minWidth : null;\r\n\r\n                if (isNumber(column.flex)) {\r\n                    column.width = null;\r\n                } else {\r\n                    column.flex = null;\r\n\r\n                    if (!isNumber(column.width)) {\r\n                        column.width = 100;\r\n                    }\r\n                }\r\n\r\n                // соберем нижний ряд колонок (если это многоуровневая шапка)\r\n                this.columnsDown.push(column);\r\n            }\r\n        });\r\n\r\n        this.props.columns = columns;\r\n        this.parent.props.columns = columns;\r\n    }\r\n\r\n    // обновляет шапку таблицы\r\n    private updateHeader(): void {\r\n        let view: ViewGrid<T> = this.parent.getView();\r\n        let headerDomDown: IDom[] = [];\r\n        let headerDom: IDom = {\r\n            name: \"tbody\",\r\n            children: []\r\n        };\r\n\r\n        this.createHeaderDom(headerDom, headerDomDown, this.props.columns, 0);\r\n        this.updateRowspan(headerDomDown, headerDom.children.length);\r\n\r\n        dom.update(this.ref(HeadGrid.REFS.BODY), this.headerDom, headerDom);\r\n\r\n        this.headerDom = headerDom;\r\n\r\n        // обновим колонки во вьюхе\r\n        view.props.columns = headerDomDown.map((d: IDom) => d.column);\r\n    }\r\n\r\n    // создает виртуальный DOM для колонок\r\n    private createHeaderDom(headerDom: IDom, headerDomDown: IDom[], columns: IColumn<T, R>[], depth: number): number {\r\n        if (headerDom.children.length === depth) {\r\n            headerDom.children.push({\r\n                name: \"tr\",\r\n                id: depth,\r\n                children: []\r\n            });\r\n        }\r\n\r\n        let domTr: IDom = headerDom.children[depth];\r\n        let totalChildren: number = 0;\r\n\r\n        columns.forEach((column: IColumn<T, R>) => {\r\n            let sortIcon: string = \"\";\r\n\r\n            if (column.direction) {\r\n                let direction: string = column.direction.toLowerCase();\r\n                sortIcon = createIcon(ICONS.HEADER_ARROW, `sort ${direction}`);\r\n            }\r\n\r\n            let domTd: IDom = {\r\n                name: \"td\",\r\n                id: column.id,\r\n                text: column.text + sortIcon,\r\n                attr: { },\r\n                cl: { },\r\n                depth,\r\n                column\r\n            };\r\n\r\n            domTd.attr[\"data-num\"] = column.id.toString();\r\n\r\n            if (column.tooltip) {\r\n                domTd.attr[\"data-qtip\"] = column.tooltip;\r\n            }\r\n\r\n            if (column.cls) {\r\n                domTd.cl[column.cls] = true;\r\n            }\r\n\r\n            domTr.children.push(domTd);\r\n\r\n            let countChildren: number = 0;\r\n            if (column.columns) {\r\n                countChildren = this.createHeaderDom(headerDom, headerDomDown, column.columns, depth + 1);\r\n            } else {\r\n                countChildren = 1;\r\n\r\n                // конечный узел колонки\r\n                headerDomDown.push(domTd);\r\n            }\r\n\r\n            if (countChildren > 1) {\r\n                domTd.attr.colspan = countChildren.toString();\r\n            }\r\n\r\n            totalChildren += countChildren;\r\n        });\r\n\r\n        return totalChildren;\r\n    }\r\n\r\n    // обновляет атрибуты rowspan\r\n    private updateRowspan(headerDomDown: IDom[], maxDepth: number): void {\r\n        headerDomDown.forEach((domTd: IDom) => {\r\n            let rowspan: number = maxDepth - domTd.depth;\r\n\r\n            if (rowspan > 1) {\r\n                domTd.attr.rowspan = rowspan.toString();\r\n            }\r\n        });\r\n    }\r\n\r\n    // вычисляет ширину каждой колонки\r\n    // возвращает информацию:\r\n    // useFlex - используется хотябы в одной колонке flex\r\n    // list - список ширин для каждой колонки\r\n    private getColsDom(): { useFlex: boolean, colsDom: IDom } {\r\n        // view\r\n        let view: ViewGrid<T> =  this.parent.getView();\r\n        let container: HTMLDivElement = methodCall(view, \"ref\", [ViewGrid.REFS.CONTAINER]);\r\n        // ширина контента\r\n        let contentWidth: number = container.getBoundingClientRect().width;\r\n\r\n        // сгенерим упрощенную модель списка колонок.\r\n        // минимальная ширина, ширина и флекс\r\n        // value будем вычислять. это и будет ширина нашей колонки\r\n        let cutColumns: IColumn<T, R>[] = this.columnsDown.map((column) => {\r\n            return {\r\n                minWidth: column.minWidth,\r\n                width: column.width,\r\n                flex: column.flex,\r\n                value: null\r\n            };\r\n        });\r\n\r\n        let useFlex: boolean = this.updateCutColumns(cutColumns, contentWidth);\r\n        let colsDom: IDom[] = cutColumns.map((cutColumn: IColumn<T, R>, index: number) => {\r\n            return {\r\n                id: index,\r\n                name: \"col\",\r\n                attr: {\r\n                    width: cutColumn.value\r\n                }\r\n            };\r\n        });\r\n\r\n        return {\r\n            useFlex,\r\n            colsDom: {\r\n                name: \"colgroup\",\r\n                children: colsDom\r\n            }\r\n        };\r\n    }\r\n\r\n    // находит ширину для каждой колонки и возвращает\r\n    // используется ли flex хотябы в одной колонке\r\n    private updateCutColumns(columns: IColumn<T, R>[], contentWidth: number): boolean {\r\n        let staticWidth: number = 0; // сумма всех колонок с фиксированной шириной\r\n        let flexWidth: number;       // ширина контента для флекса\r\n        let flexSum: number = 0;     // сумма всех колонок с флексом\r\n        let column: IColumn<T, R>;   // колонка\r\n\r\n        let minWidth: number;        // минимальная ширина колонки\r\n        let percent: number;         // процент на который будем растягивать колонку\r\n\r\n        columns.forEach((c: IColumn<T, R>) => {\r\n            if (c.flex === null) {\r\n                staticWidth += c.width;\r\n            } else {\r\n                flexSum += c.flex;\r\n            }\r\n        });\r\n\r\n        // вычитаем всю доступную нам ширину и статическую\r\n        // получаем ширину которая доступна нам для флекса\r\n        flexWidth = contentWidth - staticWidth;\r\n\r\n        // перебираем каждую колонку и находим value\r\n        let ln: number = columns.length;\r\n        for (let i = 0; i < ln; ++i) {\r\n            column = columns[i];\r\n\r\n            if (column.flex === null) {\r\n                // если у колонки не задан flex, то это колонка является статической\r\n                // просто запишем в value значение статики\r\n                column.value = `${column.width}`;\r\n            } else {\r\n                // колонка является флексовой. найдем ее минимально допустимое значение\r\n                // оно может хранится и в width и в minWidth\r\n                minWidth = column.width === null ? (column.minWidth === null ? null : column.minWidth) : column.width;\r\n                // найдем у флекса процентное соотношение.\r\n                // это значение флекса данной колонки и сумма всех флексов\r\n                percent = column.flex / flexSum;\r\n\r\n                // если минимальная ширина найдена И!\r\n                // размер колонки меньше чем минимальное значение\r\n                // то установим этой колонке минимальную ширину и\r\n                // запустим перерасчет снова\r\n                if (minWidth !== null && minWidth > percent * flexWidth) {\r\n                    column.width = minWidth;\r\n                    column.flex = null;\r\n\r\n                    return this.updateCutColumns(columns, contentWidth);\r\n                } else {\r\n                    // если минимальной ширины нет или она есть, но\r\n                    // ширина колонки больше чем ее минимум\r\n                    // то все ок. запишем ее процентное соотношение\r\n                    column.value = `${percent * 100}%`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return flexSum > 0;\r\n    }\r\n\r\n    // перебирает каждую колонку\r\n    private eachColumn(columns: IColumn<T, R>[], fn: (column: IColumn<T, R>) => void): void {\r\n        columns.forEach((column) => {\r\n            fn(column);\r\n\r\n            if (column.columns) {\r\n                this.eachColumn(column.columns, fn);\r\n            }\r\n        });\r\n    }\r\n\r\n    @on(HeadGrid.REFS.HEAD, \"click\")\r\n    private onHeaderClick(event: MouseEvent): void {\r\n        // console.log(111);\r\n        /*let td: HTMLTableDataCellElement = this.getTdByEl(event.target as HTMLElement);\r\n        let column: IColumn<T, R> = this.getColumnByTd(td);\r\n\r\n        if (column /*&& !this.findResizableColumn(td, event)* /) {\r\n            this.sortByColumn(column);\r\n\r\n            this.parent.emit(\"onHeaderClick\", column, event);\r\n        }*/\r\n    }\r\n\r\n}\r\n\r\n// регистрируем типы колонок\r\n\r\nHeadGrid.registerColumn({\r\n    xtype: \"basecolumn\",\r\n    renderer<T, R extends Grid<T>>(data: T, meta: IMeta<T, R>): string {\r\n        let value: string = data[meta.column.dataIndex];\r\n\r\n        if (meta.column.renderer) {\r\n            return meta.column.renderer(value, meta, data);\r\n        }\r\n\r\n        return value;\r\n    }\r\n});\r\n\r\nHeadGrid.registerColumn({\r\n    xtype: \"rownumberer\",\r\n    renderer<T, R extends Grid<T>>(data: T, meta: IMeta<T, R>): string {\r\n        let value: string = (meta.row.index + 1).toString();\r\n\r\n        if (meta.column.renderer) {\r\n            return meta.column.renderer(value, meta, data);\r\n        }\r\n\r\n        return value;\r\n    }\r\n});\r\n\r\nHeadGrid.registerColumn({\r\n    xtype: \"checkcolumn\",\r\n    renderer<T, R extends Grid<T>>(data: T, meta: IMeta<T, R>): string {\r\n        let dataIndex: string = meta.column.dataIndex || \"checked\";\r\n        let checked: boolean = data[dataIndex];\r\n\r\n        let checkIcon: string = createIcon(checked ? ICONS.CHECKBOX_CHECKED : ICONS.CHECKBOX);\r\n\r\n        meta.cl.checkcolumn = true;\r\n        meta.cl[\"row-center\"] = true;\r\n\r\n        if (meta.column.renderer) {\r\n            return meta.column.renderer(checkIcon, meta, data);\r\n        }\r\n\r\n        return checkIcon;\r\n    }\r\n});\r\n","\r\n/* !!! ПЕРЕПИСАТЬ !!! */\r\n\r\nimport { event, IHashMap } from \"core\";\r\nimport { Grid } from \"./../../grid\";\r\nimport { IColumn } from \"./../../headgrid/headgrid\";\r\nimport { ViewGrid, IRow } from \"../../viewgrid/viewgrid\";\r\nimport { IPlugin, IPluginProps } from \"./../../../grid/plugins/plugin\";\r\nimport { ICONS, createIcon } from \"./../../../icons\";\r\nimport { correctionCoordinate, ICoord, ISize } from \"./../../../utils/util\";\r\nimport { reedProperty, getDecl } from \"./../../../utils/util\";\r\n\r\nlet container: HTMLDivElement = null;\r\n\r\nexport class DragDropPlugin<T> implements IPlugin {\r\n\r\n    private grid: Grid<T>;\r\n    private selected: T[];\r\n\r\n    private allowDrop: boolean;\r\n    private activeIdRow: any;\r\n\r\n    private windowEvents: IHashMap<(event: MouseEvent) => void>;\r\n\r\n    constructor(props: IPluginProps, grid: Grid<T>) {\r\n        this.grid = grid;\r\n        this.selected = null;\r\n        this.windowEvents = {\r\n            mouseup: (e: MouseEvent) => {\r\n                this.onDoneDragDrop(e);\r\n            },\r\n            mousemove: (e: MouseEvent) => {\r\n                this.updateCoordinate(e);\r\n            }\r\n        };\r\n\r\n        let plugin: DragDropPlugin<T> = this;\r\n\r\n        function cellMouseDown_Grid(\r\n            gr: Grid<T>,\r\n            td: HTMLTableCellElement,\r\n            columnIndex: number,\r\n            data: T,\r\n            tr: HTMLTableRowElement,\r\n            rowIndex: number,\r\n            e: MouseEvent,\r\n            column: IColumn<T>\r\n        ): void {\r\n            plugin.onStartDrag(e, tr);\r\n        }\r\n\r\n        function cellMouseMove_Grid(\r\n            gr: Grid<T>,\r\n            td: HTMLTableCellElement,\r\n            columnIndex: number,\r\n            data: T,\r\n            tr: HTMLTableRowElement,\r\n            rowIndex: number,\r\n            e: MouseEvent,\r\n            column: IColumn<T>\r\n        ): void {\r\n            if (plugin.selected !== null) {\r\n                plugin.onUpdateDrag(e, tr, data);\r\n            }\r\n        }\r\n\r\n        this.grid.on(\"onCellMouseDown\", cellMouseDown_Grid);\r\n        this.grid.on(\"onCellMouseMove\", cellMouseMove_Grid);\r\n    }\r\n\r\n    protected checkDrop(data: T, percent: number): boolean {\r\n        let idRow: any = this.grid.props.getId(data);\r\n\r\n        return !this.selected.some((item: T) => {\r\n            return this.grid.props.getId(item) === idRow;\r\n        });\r\n    }\r\n\r\n    protected updateActivityRow(idRow: any, show: boolean): void {\r\n        let view: ViewGrid<T> = this.grid.getView();\r\n        let hash: IHashMap<any> = reedProperty(view, \"renderedHash\");\r\n        let list: IRow<T> = reedProperty(view, \"renderedList\");\r\n        let cls: string = \"ngrid-drag-drop-active-row\";\r\n\r\n        if (hash.hasOwnProperty(idRow)) {\r\n            let row: IRow<T> = list[hash[idRow]];\r\n\r\n            if (show) {\r\n                row.node.classList.add(cls);\r\n            } else {\r\n                row.node.classList.remove(cls);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected update(data: T, percent: number): void {\r\n        let view: ViewGrid<T> = this.grid.getView();\r\n        let allowDrop: boolean = this.checkDrop(data, percent);\r\n        let idRow: any;\r\n        let index: number;\r\n\r\n        if (allowDrop) {\r\n            if (percent < 0.5) {\r\n                idRow = view.props.getId(data);\r\n                index = reedProperty(view, \"dataHash\")[idRow];\r\n\r\n                if (index === 0) {\r\n                    data = null;\r\n                    idRow = null;\r\n                } else {\r\n                    data = reedProperty(view, \"dataList\")[index - 1];\r\n                    idRow = view.props.getId(data);\r\n                }\r\n            }\r\n\r\n            if (this.activeIdRow !== idRow) {\r\n                if (this.grid.emit(\"onChangeTargetDrop\", data) === false) {\r\n                    allowDrop = false;\r\n                }\r\n            }\r\n        } else {\r\n            this.activeIdRow = null;\r\n        }\r\n\r\n        if (this.activeIdRow !== idRow) {\r\n            this.updateActivityRow(this.activeIdRow, false);\r\n            this.updateActivityRow(idRow, true);\r\n\r\n            this.updateTooltip(allowDrop);\r\n\r\n            this.activeIdRow = idRow;\r\n        }\r\n    }\r\n\r\n    private onStartDrag(e: MouseEvent, tr: HTMLTableRowElement): void {\r\n        if (container === null) {\r\n            this.initTooltip();\r\n        } else {\r\n            this.showTooltip();\r\n        }\r\n\r\n        this.selected = this.grid.getSelected();\r\n        event.on(window as any, this.windowEvents);\r\n        this.grid.setCl({ \"ngrid-drag-drop\": true });\r\n    }\r\n\r\n    private onUpdateDrag(e: MouseEvent, tr: HTMLTableRowElement, data: T): void {\r\n        let bound: ClientRect = tr.getBoundingClientRect();\r\n        let full: number = bound.bottom - bound.top;\r\n        let value: number = e.clientY - bound.top;\r\n        let percent: number = value / full;\r\n\r\n        this.update(data, percent);\r\n    }\r\n\r\n    private onDoneDragDrop(e: MouseEvent): void {\r\n        this.selected = null;\r\n        event.off(window as any, this.windowEvents);\r\n        this.grid.setCl({ \"ngrid-drag-drop\": false });\r\n\r\n        this.hideTooltip();\r\n    }\r\n\r\n    // ---------------------------------------------\r\n\r\n    private initTooltip(): void {\r\n        container = document.createElement(\"div\");\r\n        document.body.appendChild(container);\r\n        container.setAttribute(\"class\", \"ngrid-drag-drop-tooltip\");\r\n    }\r\n\r\n    private showTooltip(): void {\r\n        container.style.display = \"block\";\r\n    }\r\n\r\n    private hideTooltip(): void {\r\n        container.style.display = \"none\";\r\n    }\r\n\r\n    private updateCoordinate(e: MouseEvent): void {\r\n        let bound: ClientRect = container.getBoundingClientRect();\r\n        let coord: ICoord = { x: e.clientX, y: e.clientY };\r\n        let size: ISize = { width: bound.width, height: bound.height };\r\n\r\n        coord = correctionCoordinate(coord, size);\r\n\r\n        container.style.top = `${coord.y}px`;\r\n        container.style.left = `${coord.x}px`;\r\n    }\r\n\r\n    private updateTooltip(allowDrop: boolean): void {\r\n        if (this.allowDrop !== allowDrop) {\r\n            this.allowDrop = allowDrop;\r\n\r\n            let iconId: string = allowDrop ? ICONS.DRAG_DROP_OK : ICONS.DRAG_DROP_LOCK;\r\n            let icon: string = createIcon(iconId, \"ngrid-drag-drop-icon\");\r\n            let count: number = this.selected.length;\r\n            let texts: string[] = [\r\n                `Выбрана ${count} запись`,\r\n                `Выбрано ${count} записи`,\r\n                `Выбрано ${count} записей`\r\n            ];\r\n\r\n            container.innerHTML = icon + getDecl(texts, count);\r\n        }\r\n    }\r\n}\r\n","\r\nimport { event, methodCall, dom, IHashMap } from \"core\";\r\nimport { Grid } from \"./../../grid\";\r\nimport { HeadGrid, IColumn } from \"../../headgrid/headgrid\";\r\nimport { ViewGrid } from \"../../viewgrid/viewgrid\";\r\nimport { IPlugin, IPluginProps } from \"./../../../grid/plugins/plugin\";\r\n\r\ninterface IColumnInfo<T> {\r\n    column: IColumn<T>;\r\n    width: number;\r\n    flex: number;\r\n}\r\n\r\ninterface ISize {\r\n    width: number;\r\n    flex: number;\r\n}\r\n\r\ninterface IResize<T> {\r\n    position: number;\r\n    left: number;\r\n    info: IColumnInfo<T>[];\r\n\r\n    currColumn: IColumn<T>;\r\n    nextColumn: IColumn<T>;\r\n    currColumnWidth: number;\r\n    nextColumnWidth: number;\r\n    maxDiffLastColumn: number;\r\n}\r\n\r\nexport class ResizeColumnsPlugin<T> implements IPlugin {\r\n\r\n    private grid: Grid<T>;\r\n    private line: HTMLDivElement;\r\n    private showLine: boolean;\r\n\r\n    private resizeCursor: boolean;\r\n    private resize: IResize<T>;\r\n\r\n    private windowEvents: IHashMap<(event: MouseEvent) => void>;\r\n    private events: IHashMap<(event: MouseEvent) => void>;\r\n\r\n    constructor(props: IPluginProps, grid: Grid<T>) {\r\n        this.grid = grid;\r\n\r\n        this.line = null;\r\n        this.showLine = false;\r\n\r\n        this.resizeCursor = false;\r\n        this.resize = null;\r\n\r\n        this.events = {\r\n            mousedown: (e: MouseEvent) => {\r\n                this.onMouseDown(e);\r\n            },\r\n            mousemove: (e: MouseEvent) => {\r\n                this.onMouseMove(e);\r\n            },\r\n            mouseleave: (e: MouseEvent) => {\r\n                this.onMouseLeave(e);\r\n            }\r\n        };\r\n\r\n        this.windowEvents = {\r\n            mousemove: (e: MouseEvent) => {\r\n                this.onResizeColumn(e);\r\n            },\r\n            mouseup: (e: MouseEvent) => {\r\n                this.onDoneResizeColumn(e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public findResizableColumn(td: HTMLTableCellElement, e: MouseEvent): IColumn<T> {\r\n        let head: HeadGrid<T> = this.grid.getHead();\r\n\r\n        // если td не найдено, то возьмем последнюю\r\n        if (!td) {\r\n            let body = methodCall(head, \"ref\", [HeadGrid.REFS.BODY]);\r\n            let tr = body.children[body.children.length - 1];\r\n\r\n            td = tr.children[tr.children.length - 1];\r\n        }\r\n\r\n        let rect: ClientRect = td.getBoundingClientRect();\r\n        let mouseX: number = e.clientX;\r\n        let distance: number = 8;\r\n\r\n        let column: IColumn<T> = null;\r\n\r\n        if (rect.right - mouseX <= distance && mouseX - rect.right <= distance) {\r\n            column = head.getColumnByTd(td);\r\n        } else {\r\n            if (mouseX - rect.left <= distance) {\r\n                // я думаю при многоуровневой шапке, тут будет не правильно работать !!!\r\n                td = td.previousSibling as any; // TODO\r\n                column = head.getColumnByTd(td);\r\n            }\r\n        }\r\n\r\n        if (column && column.resizable) {\r\n            return column;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public updateResizeCursor(resizable: boolean): void {\r\n        let cls: string = \"ngrid-cursor-resize\";\r\n\r\n        if (resizable !== this.resizeCursor) {\r\n            this.resizeCursor = resizable;\r\n            dom.cl(document.body, { [cls]: !resizable }, { [cls]: resizable }, false);\r\n        }\r\n    }\r\n\r\n    public onMouseDown(e: MouseEvent): void {\r\n        let head: HeadGrid<T> = this.grid.getHead();\r\n        let view: ViewGrid<T> = this.grid.getView();\r\n\r\n        let el: HTMLElement = e.target as HTMLElement;\r\n        let td: HTMLTableCellElement = head.getTdByEl(el);\r\n        let column: IColumn<T> = this.findResizableColumn(td, e);\r\n\r\n        if (column) {\r\n            let tableBody: HTMLTableElement = methodCall(head, \"ref\", [HeadGrid.REFS.BODY]);\r\n            let columns: IColumn<T>[] = head.getColumnsDown();\r\n            let index: number = columns.indexOf(column);\r\n            let nextColumn: IColumn<T> = columns[index + 1] || null;\r\n            let columnsFlex: IColumn<T>[] = columns.filter((c: IColumn<T>) => c.flex !== null);\r\n\r\n            let info: IColumnInfo<T>[] = columnsFlex.map((c: IColumn<T>) => {\r\n                let width: number;\r\n\r\n                if (c.width === null) {\r\n                    let selector: string = `td[data-num=\"${c.id}\"]`;\r\n                    let tableCell: HTMLTableCellElement = tableBody.querySelector(selector);\r\n                    let bound: ClientRect = tableCell.getBoundingClientRect();\r\n\r\n                    width = bound.width;\r\n                } else {\r\n                    width = c.width;\r\n                }\r\n\r\n                return {\r\n                    column: c,\r\n                    width,\r\n                    flex: c.flex\r\n                };\r\n            });\r\n\r\n            let currColumnWidth: number = null;\r\n            let nextColumnWidth: number = null;\r\n            let maxDiffLastColumn: number = null;\r\n\r\n            if (column.flex === null) {\r\n                currColumnWidth = column.width;\r\n            } else {\r\n                let columnInfo: IColumnInfo<T> = info.filter((inf: IColumnInfo<T>) => {\r\n                    return  inf.column === column;\r\n                })[0];\r\n\r\n                currColumnWidth = columnInfo.width;\r\n            }\r\n\r\n            if (!nextColumn || !nextColumn.resizable) {\r\n                nextColumn = null;\r\n\r\n                let viewWrap: HTMLDivElement = methodCall(view, \"ref\", [ViewGrid.REFS.WRAP]);\r\n                let wrapWidth: number = viewWrap.getBoundingClientRect().width;\r\n                let iframeWidth: number = view.getIframeWidth();\r\n\r\n                maxDiffLastColumn = iframeWidth - wrapWidth;\r\n            } else {\r\n                nextColumnWidth = nextColumn.flex === null ?\r\n                nextColumn.width : info.filter((c) => c.column === nextColumn)[0].width;\r\n            }\r\n\r\n            let headEl: HTMLDListElement = methodCall(head, \"ref\", [HeadGrid.REFS.HEAD]);\r\n            let boundHead: ClientRect = headEl.getBoundingClientRect();\r\n            let currTd: HTMLTableCellElement = tableBody.querySelector(`td[data-num=\"${column.id}\"]`);\r\n            let currBound: ClientRect = currTd.getBoundingClientRect();\r\n\r\n            this.resize = {\r\n                position: e.clientX,\r\n                left: currBound.right - boundHead.left,\r\n                info,\r\n\r\n                currColumn: column,\r\n                nextColumn,\r\n                currColumnWidth,\r\n                nextColumnWidth,\r\n                maxDiffLastColumn\r\n            };\r\n\r\n            event.on(window as any, this.windowEvents);\r\n        }\r\n\r\n        this.updateResizeCursor(!!column);\r\n    }\r\n\r\n    public onMouseMove(e: MouseEvent): void {\r\n        if (this.resize === null) {\r\n            let head: HeadGrid<T> = this.grid.getHead();\r\n            let td: HTMLTableCellElement = head.getTdByEl(e.target as HTMLElement);\r\n            let column: IColumn<T> = this.findResizableColumn(td, e);\r\n\r\n            this.updateResizeCursor(!!column);\r\n        }\r\n    }\r\n\r\n    public onMouseLeave(e: MouseEvent): void {\r\n        if (!this.resize) {\r\n            this.updateResizeCursor(false);\r\n        }\r\n    }\r\n\r\n    public onResizeColumn(e: MouseEvent): void {\r\n        let diff: number = e.clientX - this.resize.position;\r\n\r\n        // --------\r\n\r\n        let column: IColumn<T> = this.resize.currColumn;\r\n        let width: number = this.resize.currColumnWidth;\r\n        let minWidth: number = column.minWidth === null ? 0 : column.minWidth;\r\n\r\n        if (width + diff < minWidth) {\r\n            diff = minWidth - width;\r\n        }\r\n\r\n        // --------\r\n\r\n        if (!this.resize.nextColumn) {\r\n            if (this.resize.maxDiffLastColumn > diff) {\r\n                diff = this.resize.maxDiffLastColumn;\r\n            }\r\n        }\r\n        // --------\r\n\r\n        let left: number = this.resize.left;\r\n        let position: number = left + diff;\r\n\r\n        this.line.style.left = `${position}px`;\r\n\r\n        this.showVerticalLine();\r\n    }\r\n\r\n    public onDoneResizeColumn(e: MouseEvent): void {\r\n        this.applySizeColumn(e);\r\n\r\n        event.off(window as any, this.windowEvents);\r\n\r\n        this.hideVerticalLine();\r\n        this.updateResizeCursor(false);\r\n\r\n        // очищаем не сразу, чтобы не сработал клик для сортировки\r\n        setTimeout(() => {\r\n            this.resize = null;\r\n        }, 50);\r\n    }\r\n\r\n    public applySizeColumn(e: MouseEvent): void {\r\n        // жизнь боль\r\n        let currColumn: IColumn<T> = this.resize.currColumn;\r\n        let nextColumn: IColumn<T> = this.resize.nextColumn;\r\n        let currColumnWidth: number = this.resize.currColumnWidth;\r\n        let nextColumnWidth: number = this.resize.nextColumnWidth;\r\n        let diff: number = e.clientX - this.resize.position;\r\n\r\n        let newCurrColumnWidth: number = currColumnWidth;\r\n        let newNextColumnWidth: number = nextColumnWidth;\r\n        let minWidth: number;\r\n\r\n        let flexInfo: ISize = this.resize.info.reduce((result, info) => {\r\n            result.flex += info.flex;\r\n            result.width += info.width;\r\n\r\n            return result;\r\n        }, { flex: 0, width: 0 });\r\n\r\n        // --------\r\n\r\n        minWidth = currColumn.minWidth === null ? 0 : currColumn.minWidth;\r\n        if (currColumnWidth + diff < minWidth) {\r\n            diff = -(currColumnWidth - minWidth);\r\n        }\r\n\r\n        // --------\r\n\r\n        if (!this.resize.nextColumn) {\r\n            if (this.resize.maxDiffLastColumn > diff) {\r\n                diff = this.resize.maxDiffLastColumn;\r\n            }\r\n        }\r\n\r\n        // --------\r\n\r\n        if (nextColumn) {\r\n            let diffCCol;\r\n\r\n            minWidth = nextColumn.minWidth === null ? 0 : nextColumn.minWidth;\r\n            if (nextColumnWidth - diff < minWidth) {\r\n                diffCCol = nextColumnWidth - minWidth;\r\n                diff -= diffCCol;\r\n            } else {\r\n                diffCCol = diff;\r\n                diff = 0;\r\n            }\r\n\r\n            newCurrColumnWidth = currColumnWidth + diffCCol;\r\n            newNextColumnWidth = nextColumnWidth - diffCCol;\r\n\r\n            if (currColumn.flex !== null) {\r\n                currColumn.flex = newCurrColumnWidth * flexInfo.flex / flexInfo.width;\r\n            }\r\n\r\n            if (currColumn.width !== null) {\r\n                currColumn.width = newCurrColumnWidth;\r\n            }\r\n\r\n            if (nextColumn.flex !== null) {\r\n                nextColumn.flex = newNextColumnWidth * flexInfo.flex / flexInfo.width;\r\n            }\r\n\r\n            if (nextColumn.width !== null) {\r\n                nextColumn.width = newNextColumnWidth;\r\n            }\r\n        }\r\n\r\n        if (diff !== 0) {\r\n            newCurrColumnWidth += diff;\r\n\r\n            if (currColumn.flex !== null) {\r\n                currColumn.flex = newCurrColumnWidth * flexInfo.flex / flexInfo.width;\r\n            }\r\n\r\n            if (currColumn.width !== null) {\r\n                currColumn.width = newCurrColumnWidth;\r\n            }\r\n\r\n            this.resize.info.forEach((info) => {\r\n                info.column.width = info.column.flex * flexInfo.width / flexInfo.flex;\r\n            });\r\n        }\r\n\r\n        this.grid.refreshColSize();\r\n    }\r\n\r\n    // -----------------------------------------\r\n\r\n    public createVerticalLine(): void {\r\n        let div: HTMLDivElement = methodCall(this.grid, \"ref\", [Grid.REFS.GRID]);\r\n\r\n        this.line = document.createElement(\"div\");\r\n        this.line.setAttribute(\"class\", \"ngrid-head-resize-line\");\r\n\r\n        div.appendChild(this.line);\r\n    }\r\n\r\n    public cleanVerticalLine(): void {\r\n        this.line = null;\r\n        this.showLine = false;\r\n    }\r\n\r\n    public showVerticalLine(): void {\r\n        if (!this.showLine) {\r\n            this.showLine = true;\r\n            this.line.style.display = \"block\";\r\n        }\r\n    }\r\n\r\n    public hideVerticalLine(): void {\r\n        if (this.showLine) {\r\n            this.showLine = false;\r\n            this.line.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    protected mount(): void {\r\n        let head: HeadGrid<T> = this.grid.getHead();\r\n        let div: HTMLDivElement = methodCall(head, \"ref\", [HeadGrid.REFS.HEAD]);\r\n\r\n        this.createVerticalLine();\r\n        event.on(div, this.events);\r\n    }\r\n\r\n    protected unmount(): void {\r\n        this.cleanVerticalLine();\r\n        event.off(div, this.events);\r\n    }\r\n}\r\n","\r\n// проверка на возможность использования position: sticky\r\n// если нет, то будем использовать самописный полифил\r\n\r\nlet el: HTMLDivElement = document.createElement(\"div\");\r\nlet options: string[] = [\"\", \"-webkit-\", \"-ms-\"];\r\n\r\nconst supportSticky: boolean = options.some((option: string) => {\r\n    el.style.position = option + \"sticky\";\r\n\r\n    return !!el.style.position;\r\n});\r\n\r\nel = null;\r\noptions = null;\r\n\r\nexport { supportSticky };\r\n","\r\nimport { Component, template, IComponentProps, methodCall } from \"core\";\r\nimport { IHashMap } from \"core\";\r\nimport { Grid } from \"./../../grid\";\r\nimport { HeadGrid, IColumn } from \"./../../headgrid/headgrid\";\r\nimport { ViewGrid, IRow, IMeta } from \"./../../viewgrid/viewgrid\";\r\nimport { reedProperty, getScrollbarSize } from \"./../../../utils/util\";\r\nimport { supportSticky } from \"./../../../grid/plugins/supportSticky\";\r\n\r\n@template({\r\n    html: [\r\n        `<div ref=\"wrap\" class=\"npinrow\">`,\r\n            `<table ref=\"table\">`,\r\n                `<colgroup ref=\"cols\"></colgroup>`,\r\n                `<tbody ref=\"body\"></tbody>`,\r\n            `</table>`,\r\n        `</div>`\r\n    ].join(\"\"),\r\n    root: {\r\n        tagName: \"div\",\r\n        ref: \"content\",\r\n        cl: {\r\n            ngridpinrow: true,\r\n            ngridtotal: true,\r\n            sticky: supportSticky,\r\n            fixed: !supportSticky\r\n        }\r\n    }\r\n})\r\nexport class Container<T> extends Component<IComponentProps> {\r\n\r\n    public static REFS = {\r\n        CONTENT: \"content\",\r\n        WRAP: \"wrap\",\r\n        TABLE: \"table\",\r\n        COLS: \"cols\",\r\n        BODY: \"body\"\r\n    };\r\n\r\n    protected renderedList: IRow<T>[];         // данные, которые были прорендерены (массив)\r\n    protected renderedHash: IHashMap<any>;     // данные, которые были прорендерены (ключ -> индекс)\r\n\r\n    public updateTop(grid: Grid<T>): void {\r\n        let view: ViewGrid<T> = grid.getView();\r\n        let content: HTMLDivElement = methodCall(view, \"ref\", [ViewGrid.REFS.CONTENT]);\r\n        let boundContent: ClientRect = content.getBoundingClientRect();\r\n\r\n        let wrapWidth: number = boundContent.width;\r\n\r\n        if (view.props.bufferEnable) {\r\n            let rowHeight: number = view.props.bufferHeight;\r\n            let countRows: number = reedProperty(view, \"dataList\").length;\r\n            let height: number = rowHeight * countRows;\r\n\r\n            if (view.getHeight() < height) {\r\n                wrapWidth -= getScrollbarSize();\r\n            }\r\n        } else {\r\n            if (content.scrollHeight > content.clientHeight) {\r\n                wrapWidth -= getScrollbarSize();\r\n            }\r\n        }\r\n\r\n        this.css(Container.REFS.CONTENT, { width: wrapWidth + \"px\" });\r\n    }\r\n\r\n    public refresh(grid: Grid<T>, onlyInsertOrRemove: boolean): void {\r\n        this.renderData(grid, onlyInsertOrRemove);\r\n\r\n        let view: ViewGrid<T> = grid.getView();\r\n        let rowHeight: number = view.props.bufferHeight;\r\n        let iframeHeight: number = view.getIframeHeight();\r\n        let top: number = iframeHeight  - rowHeight;\r\n\r\n        this.css(Container.REFS.WRAP, { top: `${top}px` });\r\n    }\r\n\r\n    public renderData(grid: Grid<T>, onlyInsertOrRemove: boolean): void {\r\n        if (onlyInsertOrRemove) {\r\n            return;\r\n        }\r\n\r\n        let body: HTMLTableElement = this.ref(Container.REFS.BODY) as HTMLTableElement;\r\n        let view: ViewGrid<T> = grid.getView();\r\n        let columns: IColumn<T> = view.props.columns;\r\n\r\n        let xtypes = columns.reduce((result: IHashMap<string>, column: IColumn<T>) => {\r\n            result[column.id] = column.xtype;\r\n            column.xtype = \"totalcolumn\";\r\n\r\n            return result;\r\n        }, {});\r\n\r\n        let item: any = {\r\n            id: -10,\r\n            list: view.getData()\r\n        };\r\n\r\n        methodCall(view, \"renderData\", [this as any, body, { start: 0 }, [item], false]);\r\n\r\n        columns.forEach((column: IColumn<T>) => {\r\n            column.xtype = xtypes[column.id];\r\n        });\r\n    }\r\n\r\n    protected beforeInit(): void {\r\n        this.renderedList = [];\r\n        this.renderedHash = {};\r\n    }\r\n\r\n}\r\n\r\n// --------------------------------------------------\r\n\r\nHeadGrid.registerColumn({\r\n    xtype: \"totalcolumn\",\r\n    renderer<T, R extends Grid<T>>(info: any, meta: IMeta<T, R>): string {\r\n        if (meta.column.totalRenderer) {\r\n            return meta.column.totalRenderer(info.list, meta);\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n});\r\n","\r\nimport { methodCall } from \"core\";\r\nimport { Grid } from \"./../../grid\";\r\nimport { ViewGrid } from \"../../viewgrid/viewgrid\";\r\nimport { IPlugin, IPluginProps } from \"./../../../grid/plugins/plugin\";\r\nimport { Container } from \"./container\";\r\n\r\nexport class TotalPlugin<T> implements IPlugin {\r\n\r\n    private grid: Grid<T>;\r\n    private container: Container<T>;\r\n\r\n    constructor(props: IPluginProps, grid: Grid<T>) {\r\n        this.grid = grid;\r\n        this.container = new Container();\r\n\r\n        grid.on(\"onChangeFrameSize\", (gr: Grid<T>) => {\r\n            // this.container.hide();\r\n            this.container.updateTop(gr);\r\n        });\r\n\r\n        grid.on(\"onRefresh\", (gr: Grid<T>, onlyInsertOrRemove: boolean) => {\r\n            this.container.refresh(gr, onlyInsertOrRemove);\r\n        });\r\n\r\n        // очень важно!!! для синхронизации с основной таблицей\r\n        let view: ViewGrid<T> =  this.grid.getView();\r\n        view.addSyncTable(this.container);\r\n    }\r\n\r\n    public mount(): void {\r\n        let view: ViewGrid<T> =  this.grid.getView();\r\n        let padding: number = view.props.bufferHeight - 1;\r\n\r\n        let content: HTMLDivElement = methodCall(view, \"ref\", [ViewGrid.REFS.CONTENT]);\r\n        let container: HTMLDivElement = methodCall(view, \"ref\", [ViewGrid.REFS.CONTAINER]);\r\n\r\n        this.container.appendChild(content);\r\n\r\n        container.style.boxSizing = `content-box`;\r\n        container.style.paddingBottom = `${padding}px`;\r\n    }\r\n\r\n    public unmount(): void {\r\n        this.container.remove();\r\n    }\r\n}\r\n","\r\nimport { event, methodCall, IHashMapAny } from \"core\";\r\nimport { IHashMap } from \"core\";\r\nimport { Grid } from \"./../../grid\";\r\nimport { HeadGrid, IColumn } from \"./../../headgrid/headgrid\";\r\nimport { ICONS, createIcon } from \"./../../../icons\";\r\nimport { IPlugin, IPluginProps } from \"./../../../grid/plugins/plugin\";\r\nimport { SettingsGrid, ISettingGrid } from \"./settingsGrid\";\r\nimport { arrayToObject, isNumber } from \"./../../../utils/util\";\r\nimport { correctionCoordinate, ICoord, ISize } from \"./../../../utils/util\";\r\nimport { IMeta } from \"../../viewgrid/viewgrid\";\r\n\r\ninterface IEventListeners extends IHashMap<(event: MouseEvent) => void> { }\r\n\r\ninterface IViewColumnsPluginProps extends IPluginProps {\r\n    positionAdditionnalColumn?: number; // позиция доп. колонки относительно правого края\r\n    settings?: ISetting[];\r\n}\r\n\r\ninterface IExtendSetting {\r\n    access: boolean;          // доступ к колонке, если false - то как будто колонки и нет\r\n    allowSetting: boolean;    // возможность настраивать колонку\r\n    allowAdditional: boolean; // разрешить скрывать колонку в доп. меню\r\n    allowDraggable: boolean;  // разрешить перетаскивать колонку\r\n\r\n    additional: boolean;      // колонка спрятана в доп. меню\r\n    hidden: boolean;          // колонка скрыта\r\n}\r\n\r\ninterface ISetting {\r\n    column: string;\r\n    additional: boolean;\r\n    hidden: boolean;\r\n}\r\n\r\n// ----------------------------------------\r\n\r\nlet settingsGrid: SettingsGrid = new SettingsGrid();\r\nlet container: HTMLDivElement = document.createElement(\"div\");\r\nlet activeMenu: ViewColumnsPlugin<any> = null;\r\nlet ignoreHideMenu: boolean = false;\r\nlet needRender: boolean = true;\r\n\r\n(() => {\r\n    container.setAttribute(\"class\", \"ngrid-setting-columns\");\r\n\r\n    event.on(window as any, {\r\n        mousedown: () => {\r\n            if (ignoreHideMenu) {\r\n                ignoreHideMenu = false;\r\n                return;\r\n            }\r\n\r\n            ViewColumnsPlugin.hide();\r\n        }\r\n    });\r\n\r\n    event.on(container, {\r\n        mousedown: () => {\r\n            ignoreHideMenu = true;\r\n        }\r\n    });\r\n})();\r\n\r\nexport class ViewColumnsPlugin<T> implements IPlugin {\r\n\r\n    public static hide(): void {\r\n        if (activeMenu !== null) {\r\n            activeMenu.hidePopup();\r\n        }\r\n    }\r\n\r\n    private grid: Grid<T>;\r\n    private view: HTMLDivElement;\r\n    private events: IEventListeners;\r\n    private props: IViewColumnsPluginProps;\r\n\r\n    private originalColumns: IColumn<T>[];\r\n    private modityColumns: IColumn<T>[];\r\n    private additionalColumns: IColumn<T>[];\r\n\r\n    constructor(props: IViewColumnsPluginProps, grid: Grid<T>) {\r\n        this.props = props;\r\n        this.grid = grid;\r\n\r\n        if (!isNumber(props.positionAdditionnalColumn)) {\r\n            props.positionAdditionnalColumn = 0;\r\n        }\r\n\r\n        if (!Array.isArray(props.settings)) {\r\n            props.settings = [];\r\n        }\r\n\r\n        this.events = {\r\n            click: (e: MouseEvent): void => {\r\n                this.showPopup(e);\r\n            }\r\n        };\r\n\r\n        this.originalColumns = this.grid.getColumns();\r\n\r\n        this.initSettings();\r\n        this.update(this.props.settings);\r\n    }\r\n\r\n    public showPopup(e: MouseEvent): void {\r\n        if (needRender) {\r\n            needRender = false;\r\n            document.body.appendChild(container);\r\n            settingsGrid.appendChild(container);\r\n        }\r\n\r\n        let height: number = settingsGrid.getView().props.bufferHeight;\r\n        let dataGrid: ISettingGrid[] = this.originalColumns.filter((column: IColumn<T>) => {\r\n            return column.settings.allowSetting;\r\n        }).map((column: IColumn<T>) => {\r\n            return {\r\n                id: column.dataIndex,\r\n                name: column.text,\r\n                allowAdditional: column.settings.allowAdditional,\r\n                allowDraggable: column.settings.allowDraggable,\r\n                additional: column.settings.additional,\r\n                hidden: column.settings.hidden\r\n            };\r\n        });\r\n\r\n        settingsGrid.setHeight(dataGrid.length * height + 1);\r\n        settingsGrid.loadData(dataGrid);\r\n\r\n        container.style.display = \"block\";\r\n        activeMenu = this;\r\n\r\n        this.updatePosition(e);\r\n    }\r\n\r\n    public hidePopup(): void {\r\n        if (activeMenu === this) {\r\n            container.style.display = \"none\";\r\n            activeMenu = null;\r\n\r\n            let data: ISettingGrid[] = settingsGrid.getData();\r\n            let settings: ISetting[] = data.map((item: ISettingGrid) => {\r\n                return {\r\n                    column: item.id,\r\n                    additional: item.additional,\r\n                    hidden: item.hidden\r\n                };\r\n            });\r\n\r\n            this.update(settings);\r\n        }\r\n    }\r\n\r\n    public updatePosition(e: MouseEvent): void {\r\n        let bound: ClientRect = this.view.getBoundingClientRect();\r\n        let coord: ICoord = { x: e.clientX, y: e.clientY };\r\n        let size: ISize = { width: bound.width, height: bound.height };\r\n\r\n        coord = correctionCoordinate(coord, size);\r\n\r\n        container.style.left = coord.x + \"px\";\r\n        container.style.top = coord.y + \"px\";\r\n    }\r\n\r\n    protected initSettings(): void {\r\n        this.originalColumns.forEach((column: IColumn<T>) => {\r\n            if (!column.hasOwnProperty(\"settings\")) {\r\n                column.settings = {};\r\n            }\r\n\r\n            let settings: IExtendSetting = column.settings; // настройки колонки\r\n\r\n            settings.access = settings.access !== false;                  // default: true\r\n            settings.allowSetting = settings.allowSetting === true;       // default: false\r\n            settings.allowAdditional = settings.allowAdditional === true; // default: false\r\n            settings.allowDraggable = settings.allowDraggable === true;   // default: false\r\n            settings.additional = settings.allowAdditional ? settings.additional === true : false; // default: false\r\n            settings.hidden = settings.hidden === true;                   // default: false\r\n        });\r\n    }\r\n\r\n    protected update(settings: ISetting[]): void {\r\n        this.modityColumns = this.originalColumns.filter((column: IColumn<T>) => {\r\n            return column.settings.access;\r\n        });\r\n\r\n        this.updateSettings(settings);\r\n        this.updateSort(settings);\r\n        this.updateProps();\r\n\r\n        this.updateColumnList();\r\n\r\n        this.grid.reconfigure(this.grid.props.columns);\r\n    }\r\n\r\n    protected updateSettings(s: ISetting[]): void {\r\n        let settingsHash: IHashMap<ISetting> = arrayToObject(s, (setting: ISetting) => setting.column);\r\n\r\n        this.modityColumns.forEach((column: IColumn<T>) => {\r\n            let name: string = column.dataIndex;\r\n\r\n            if (settingsHash.hasOwnProperty(name)) {\r\n                let settings: IExtendSetting = column.settings;    // настройки колонки\r\n                let customSettings: ISetting = settingsHash[name]; // кастомные настройки\r\n\r\n                if (settings.allowAdditional && customSettings.hasOwnProperty(\"additional\")) {\r\n                    settings.additional = customSettings.additional;\r\n                }\r\n\r\n                if (customSettings.hasOwnProperty(\"hidden\")) {\r\n                    settings.hidden = customSettings.hidden;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    protected updateSort(settings: ISetting[]): void {\r\n        settings.forEach((setting: ISetting, index: number) => {\r\n            // 1\r\n        });\r\n    }\r\n\r\n    protected updateProps(): void {\r\n        this.props.settings = this.modityColumns.map((column: IColumn<T>) => {\r\n            return {\r\n                column: column.dataIndex,\r\n                additional: column.settings.additional,\r\n                hidden: column.settings.hidden\r\n            };\r\n        });\r\n    }\r\n\r\n    protected updateColumnList(): void {\r\n        this.additionalColumns = this.modityColumns.filter((column: IColumn<T>) => {\r\n            return column.settings.additional;\r\n        });\r\n\r\n        this.modityColumns = this.modityColumns.filter((column: IColumn<T>) => {\r\n            return !column.settings.hidden && !column.settings.additional;\r\n        });\r\n\r\n        if (this.additionalColumns.length > 0) {\r\n            let additionalColumn: IColumn<T> = this.createAdditionalColumn();\r\n            let positionFromEnd: number = this.modityColumns.length - this.props.positionAdditionnalColumn;\r\n\r\n            if (positionFromEnd < 0) {\r\n                positionFromEnd = 0;\r\n            }\r\n\r\n            this.modityColumns.splice(positionFromEnd, 0, additionalColumn);\r\n        }\r\n\r\n        this.grid.getHead().props.columns = this.modityColumns;\r\n        this.grid.props.columns = this.modityColumns;\r\n    }\r\n\r\n    protected createAdditionalColumn(): IColumn<T> {\r\n        return {\r\n            text: createIcon(ICONS.ADDITIONAL), // , \"setting-columns-icon\"\r\n            dataIndex: \"pluginadditionalcolumn\",\r\n            cls: \"icon-header\",\r\n            tdCls: {\r\n                \"icon-cell\": true\r\n            },\r\n            tooltip: \"Настройка колонок\",\r\n            sortable: false,\r\n            resizable: false,\r\n            width: 29,\r\n            renderer(value: string, meta: IMeta<IColumn<IHashMapAny>>, item: IHashMapAny): string {\r\n                if (item.leaf) {\r\n                    return createIcon(ICONS.ADDITIONAL); // , \"setting-columns-icon\"\r\n                }\r\n\r\n                return \"\";\r\n            }\r\n        };\r\n    }\r\n\r\n    protected mount(): void {\r\n        this.initView();\r\n        this.bindEvent();\r\n    }\r\n\r\n    protected unmount(): void {\r\n        this.unbindEvent();\r\n        this.cleanView();\r\n    }\r\n\r\n    protected initView(): void {\r\n        let head: HeadGrid<T> = this.grid.getHead();\r\n        let div: HTMLDivElement = methodCall(head, \"ref\", [HeadGrid.REFS.HEAD]);\r\n\r\n        this.view = document.createElement(\"div\");\r\n        this.view.setAttribute(\"class\", \"setting-columns\");\r\n        this.view.innerHTML = createIcon(ICONS.SETTINGS, \"setting-columns-icon\");\r\n\r\n        div.appendChild(this.view);\r\n    }\r\n\r\n    protected cleanView(): void {\r\n        this.view = null;\r\n    }\r\n\r\n    protected bindEvent(): void {\r\n        event.on(this.view, this.events);\r\n    }\r\n\r\n    protected unbindEvent(): void {\r\n        event.off(this.view, this.events);\r\n    }\r\n}\r\n","\r\nimport { Grid } from \"./../../grid\";\r\nimport { IColumn } from \"./../../headgrid/headgrid\";\r\nimport { ICONS, createIcon } from \"./../../../icons\";\r\nimport { IMeta } from \"../../viewgrid/viewgrid\";\r\n\r\nexport interface ISettingGrid {\r\n    id: string;\r\n    name: string;\r\n    allowAdditional: boolean;\r\n    allowDraggable: boolean;\r\n    additional: boolean;\r\n    hidden: boolean;\r\n}\r\n\r\nexport class SettingsGrid extends Grid<ISettingGrid> {\r\n\r\n    protected beforeInit(): void {\r\n        super.beforeInit();\r\n\r\n        this.props.bufferEnable = false;\r\n        this.props.hideHead = true;\r\n\r\n        this.props.columns = [{\r\n            width: 29,\r\n            dataIndex: \"checkbox\",\r\n            tdCls: {\r\n                \"ngrid-setting-columns-checkbox\": true\r\n            },\r\n            renderer(value: string, meta: IMeta<ISettingGrid>, data: ISettingGrid): string {\r\n                let iconId: string;\r\n\r\n                if (data.additional) {\r\n                    iconId = ICONS.CHECKBOX_SQUARE;\r\n                } else {\r\n                    iconId = data.hidden ? ICONS.CHECKBOX : ICONS.CHECKBOX_CHECKED;\r\n                }\r\n\r\n                return createIcon(iconId);\r\n            }\r\n        }, {\r\n            flex: 1,\r\n            dataIndex: \"name\",\r\n            renderer(value: string, meta: IMeta<ISettingGrid>, data: ISettingGrid): string {\r\n                return value;\r\n            }\r\n        }];\r\n\r\n        // добавляем события\r\n\r\n        function cellMouseDown_Grid(\r\n            grid: Grid<ISettingGrid>,\r\n            td: HTMLTableCellElement,\r\n            columnIndex: number,\r\n            data: ISettingGrid,\r\n            tr: HTMLTableRowElement,\r\n            rowIndex: number,\r\n            event: MouseEvent,\r\n            column: IColumn<ISettingGrid>\r\n        ) {\r\n            if (column.dataIndex === \"checkbox\") {\r\n                if (data.additional) {\r\n                    data.additional = false;\r\n                    data.hidden = true;\r\n                } else {\r\n                    if (data.hidden) {\r\n                        data.hidden = false;\r\n                        data.additional = false;\r\n                    } else {\r\n                        if (data.allowAdditional) {\r\n                            data.hidden = false;\r\n                            data.additional = true;\r\n                        } else {\r\n                            data.hidden = true;\r\n                            data.additional = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            grid.refresh();\r\n        }\r\n\r\n        this.on(\"onCellMouseDown\", cellMouseDown_Grid);\r\n    }\r\n}\r\n","module.exports = \"<div ref=\\\"content\\\" class=\\\"ngrid-content\\\">\\n    <iframe ref=\\\"iframe\\\" src=\\\"\\\" class=\\\"ngrid-iframe\\\"></iframe>\\n    <div ref=\\\"container\\\" class=\\\"container\\\">\\n        <div ref=\\\"wrap\\\" class=\\\"wrap\\\">\\n            <table ref=\\\"table\\\">\\n                <colgroup ref=\\\"cols\\\"></colgroup>\\n                <tbody ref=\\\"body\\\"></tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\";","\r\nimport { Component, template, IComponentProps } from \"core\";\r\nimport { on, IRef, event, merge } from \"core\";\r\nimport { dom, IDom } from \"core\";\r\nimport { IHashMap, IHashMapString, IHashMapBoolean, IHashMapAny } from \"core\";\r\nimport { Grid } from \"./../grid\";\r\nimport { HeadGrid, IColumn } from \"../headgrid/headgrid\";\r\nimport { arrayToObject, findParentNode, isNumber } from \"./../../utils/util\";\r\nimport { injectScrollbarInfo, getScrollbarSize } from \"./../../utils/util\";\r\n\r\n// параметры которые можно передавать внутрь компонента\r\nexport interface IViewProps<T, R extends Grid<T> = Grid<T>> extends IComponentProps {\r\n    columns?: IColumn<T, R>[];    // нижний ряд колонок (если колонки многоуровневые)\r\n\r\n    multiSelect?: boolean;        // возможность множественного выбора\r\n    emptyRowText?: string;        // текст для отображения когда данных в таблице нет\r\n    data?: T[] | T;               // массив данных\r\n    getId?: (item: T) => any;     // получает id зааписи\r\n\r\n    bufferEnable?: boolean;       // включить рендеринг только видимой части таблицы\r\n    bufferHeight?: number;        // высота строрки\r\n    bufferStock?: number;         // сколько строк рендерить за пределами видимости (запас)\r\n    bufferScrollMin?: number;     // сколько пикселей при скролле игнорировать ререндер таблицы\r\n}\r\n\r\n// информация о строке таблицы\r\nexport interface IRow<T> {\r\n    idRow: any;                   // id строки\r\n    data: T;                      // данные строки\r\n    selected: boolean;            // является ли строка выделенной ??? (нужно ли это)\r\n    index: number;                // индекс строки\r\n    dataCells: IDom;              // данные строки\r\n    node: HTMLTableRowElement;    // ссылка на DOM узел (td)\r\n}\r\n\r\n// метаданные при рендере ячеек в строке\r\nexport interface IMeta<T, R extends Grid<T> = Grid<T>> {\r\n    view: Grid<T>;                // ссылка на Grid компонент\r\n    row: IRow<T>;                 // ссылка на IRow\r\n    column: IColumn<T, R>;        // ссылка на Column\r\n    data: T;                      // модель данных для строки\r\n    attr: IHashMapString;         // атрибуты, которые можно добавить для td DOM узла\r\n    cl: IHashMapBoolean;          // классы, которые можно добавить для td DOM узла\r\n    css: IHashMapString;          // стили, которые можно добавить для td DOM узла\r\n    [propName: string]: any;      // другие произвольные параметры, которые можно записать в Meta\r\n}\r\n\r\n// контекст вызова рендера\r\nexport interface IContext<T> {\r\n    renderedList: IRow<T>[];        // список строк которые были прорендерены (массив)\r\n    renderedHash: IHashMap<number>; // список строк которые были прорендерены (ключ->значение)\r\n}\r\n\r\n// диапазон с какой и по какую строки нужно рендерить\r\nexport interface IRange {\r\n    start: number;                // с какой позиции нужно рендерить строки\r\n    finish: number;               // по какую позицию нужно рендерить строки\r\n}\r\n\r\n// информация о строке\r\nexport interface IVisibleInfo extends IRange {\r\n    shiftTop: number;             // сдвиг сверху\r\n    shiftBottom: number;          // сдвиг снизу\r\n    index: number;                // информация по номеру по порядку строки (индексу)\r\n    inRange: boolean;             // является ли строка в видимой области видимости\r\n}\r\n\r\n@template({\r\n    html: require(\"./viewgrid.html\"),\r\n    root: {\r\n        tagName: \"div\",\r\n        ref: \"data\",\r\n        cl: {\r\n            \"ngrid-data\": true\r\n        }\r\n    }\r\n})\r\nexport class ViewGrid<\r\n        T extends IHashMapAny = IHashMapAny,\r\n        P extends IViewProps<T> = IViewProps<T>,\r\n        R extends Grid<T> = Grid<T>\r\n    > extends Component<P, R> {\r\n\r\n    public static REFS = {\r\n        DATA: \"data\",\r\n        CONTENT: \"content\",\r\n        IFRAME: \"iframe\",\r\n        CONTAINER: \"container\",\r\n        WRAP: \"wrap\",\r\n        TABLE: \"table\",\r\n        COLS: \"cols\",\r\n        BODY: \"body\"\r\n    };\r\n\r\n    protected rawList: T[];                    // исходные данные (массив)\r\n    protected rawHash: IHashMap<any>;          // исходные данные (ключ -> индекс)\r\n    protected dataList: T[];                   // данные для рендеринга (массив)\r\n    protected dataHash: IHashMap<any>;         // данные для рендеринга (ключ -> индекс)\r\n    protected renderedList: IRow<T>[];         // данные, которые были прорендерены (массив)\r\n    protected renderedHash: IHashMap<any>;     // данные, которые были прорендерены (ключ -> индекс)\r\n    protected selectedList: T[];               // список выбранных записей (массив)\r\n    protected selectedHash: IHashMap<any>;     // список выбранных записей (ключ -> индекс)\r\n\r\n    protected listenersFrame: IHashMapAny;     // событие на изменение размера таблицы\r\n    protected resizeTimer: number;             // таймер при изменении размера таблицы\r\n    protected refreshTimer: number;            // таймер для отложенного обновления таблицы\r\n    protected dirty: boolean;                  // таблица нуждается в refresh'e\r\n\r\n    protected syncTableList: Component<any>[]; // список компонентов для синхронизации с таблицей\r\n    protected showingEmptyRow: boolean;        // флаг указвающий показывается ли пустая строка с текстом \"нет данных\"\r\n    protected emptyRowColsLn: number;          // кол-во колонок в пустой строке\r\n\r\n    protected scrollTop: number;               // текущая позиция скролла сверху\r\n    protected scrollLeft: number;              // текущая позиция скролла слева\r\n    protected renderScrollTop: number;         // на какой позиции скролла сверху был сделан рендер\r\n    protected renderScrollLeft: number;        // на какой позиции скролла слева был сделан рендер\r\n\r\n    protected width: number;                   // текущая ширина\r\n    protected height: number;                  // текущая высота\r\n    protected iframeWidth: number;             // ширина тега iframe\r\n    protected iframeHeight: number;            // высота тега iframe\r\n\r\n    protected mouseX: number;                  // позиция мыши по оси X\r\n    protected mouseY: number;                  // позиция мыши по оси Y\r\n\r\n    protected warnings: IHashMapBoolean;       // сообщения об ошибках при рендере (при одинаковых айдишниках)\r\n\r\n    // загружает данные в таблицу\r\n    public loadData(data: T[]): void {\r\n        this.rawList = data || [];\r\n        this.rawHash = {};\r\n\r\n        data.forEach((item: T) => {\r\n            let idRow: any = this.props.getId(item);\r\n\r\n            this.rawHash[idRow] = item;\r\n        });\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    public getData(): T[] {\r\n        return this.rawList;\r\n    }\r\n\r\n    // получает модель данных по id\r\n    public getRowById(id: any): T {\r\n        if (this.rawHash.hasOwnProperty(id)) {\r\n            return this.rawHash[id];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // получает ширину View\r\n    public getWidth(): number {\r\n        return this.width;\r\n    }\r\n\r\n    // получает высоту View\r\n    public getHeight(): number {\r\n        return this.height;\r\n    }\r\n\r\n    // получает ширину iframe\r\n    public getIframeWidth(): number {\r\n        return this.iframeHeight;\r\n    }\r\n\r\n    // получает высоту iframe\r\n    public getIframeHeight(): number {\r\n        return this.iframeHeight;\r\n    }\r\n\r\n    // возвращает список выбранных строк\r\n    public getSelected(): T[] {\r\n        return this.selectedList;\r\n    }\r\n\r\n    // устанавливает выделенные строки\r\n    public doSelect(data: T | T[], inversion: boolean = false): void {\r\n        // строки которые нужно выделить\r\n        let toSelect: T[] = [];\r\n        // строки с которых нужно снять выделение\r\n        let toDeselect: T[] = [];\r\n        // новый список с выделеными строками\r\n        let selectedList: T[] = [];\r\n        let selectedHash: IHashMap<any> = {};\r\n\r\n        // если передали не массив строк\r\n        if (!Array.isArray(data)) {\r\n            data = [data];\r\n        }\r\n\r\n        // инверсия выделения\r\n        if (inversion) {\r\n            // inversion - инверсия строк\r\n            // если строка была выделена, то снимем выделение\r\n            // если строка не выделена, то выделим ее\r\n            data.forEach((item: T) => {\r\n                let idRow: any = this.props.getId(item);\r\n\r\n                if (this.selectedHash.hasOwnProperty(idRow)) {\r\n                    toDeselect.push(item);\r\n                } else {\r\n                    toSelect.push(item);\r\n                }\r\n            });\r\n        } else {\r\n            // сфоррмируем hash таблицу со строками, которые нужно выделить\r\n            let dataHash: IHashMap<T> = arrayToObject(data, (item: T) => this.props.getId(item));\r\n\r\n            // если в существующем списке нет строк которые есть в новом списке, то добавим их\r\n            data.forEach((item: T) => {\r\n                let idRow: any = this.props.getId(item);\r\n\r\n                if (!this.selectedHash.hasOwnProperty(idRow)) {\r\n                    toSelect.push(item);\r\n                }\r\n            });\r\n\r\n            // если в существующем списке есть строки которых нет в новом списке, то уберем их\r\n            this.selectedList.forEach((item: T) => {\r\n                let idRow: any = this.props.getId(item);\r\n\r\n                if (!dataHash.hasOwnProperty(idRow)) {\r\n                    toDeselect.push(item);\r\n                }\r\n            });\r\n        }\r\n\r\n        // если изменений нет, выходим\r\n        if (toSelect.length === 0 && toDeselect.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // формирование массива selected\r\n        let toDeselectHash: IHashMap<T> = arrayToObject(toDeselect, (item: T) => this.props.getId(item));\r\n\r\n        this.selectedList.forEach((item: T) => {\r\n            let idRow: any = this.props.getId(item);\r\n\r\n            if (!toDeselectHash.hasOwnProperty(idRow)) {\r\n                selectedHash[idRow] = selectedList.length;\r\n                selectedList.push(item);\r\n            }\r\n        });\r\n\r\n        toSelect.forEach((item: T) => {\r\n            let idRow: any = this.props.getId(item);\r\n\r\n            selectedHash[idRow] = selectedList.length;\r\n            selectedList.push(item);\r\n        });\r\n\r\n        // вызов событий\r\n        let isManyDeselect: boolean = this.fireManyEvents(toDeselect, \"onBeforeDeselect\", true);\r\n        let isManySelect: boolean = this.fireManyEvents(toSelect, \"onBeforeSelect\", true);\r\n        if (isManyDeselect && isManySelect) {\r\n            // сохраним новый список с выбранными строками\r\n            this.selectedList = selectedList;\r\n            this.selectedHash = selectedHash;\r\n\r\n            this.fireManyEvents(toDeselect, \"onDeselect\", false);\r\n            this.fireManyEvents(toSelect, \"onSelect\", false);\r\n\r\n            this.parent.emit(\"onSelectionChange\", selectedList);\r\n\r\n            // обновим нашу таблицу\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    // проверяет находится ли строка в области видимости\r\n    public isVisibleRow(data: T): boolean {\r\n        return this.getVisibleInfo(data).inRange;\r\n    }\r\n\r\n    // устанавливает скролл на указанную позицию\r\n    public scrollTo(scrollTop?: number, scrollLeft?: number): void {\r\n        let content: HTMLDivElement = this.ref(ViewGrid.REFS.CONTENT) as HTMLDivElement;\r\n\r\n        if (!isNumber(scrollTop)) {\r\n            scrollTop = content.scrollTop;\r\n        }\r\n\r\n        if (!isNumber(scrollLeft)) {\r\n            scrollLeft = content.scrollLeft;\r\n        }\r\n\r\n        content.scrollTo(scrollLeft, scrollTop);\r\n    }\r\n\r\n    // устанавливает скролл на указанную запись\r\n    // если запись находится в зоне видимости\r\n    // то метод ничего делать не будет\r\n    // isTop - прикреплять снизу или сверху\r\n    public scrollBy(data: T, isTop: boolean = true): void {\r\n        let info: IVisibleInfo = this.getVisibleInfo(data);\r\n\r\n        // находится в зоне видимости - выходим\r\n        if (info.inRange || info.index === null) {\r\n            return;\r\n        }\r\n\r\n        let rowHeight: number = this.props.bufferHeight;\r\n        let scrollTop: number = info.index * rowHeight;\r\n\r\n        if (isTop) {\r\n            scrollTop -= info.shiftTop * rowHeight;\r\n        } else {\r\n            scrollTop -= this.height - rowHeight;\r\n            scrollTop -= info.shiftBottom * rowHeight;\r\n        }\r\n\r\n        this.scrollTo(scrollTop);\r\n    }\r\n\r\n    // устанавливает чек в таблице\r\n    public setCheck(data: T, checked: boolean): void {\r\n        let grid: R = this.parent;\r\n\r\n        (data as any).checked = checked; // TODO\r\n\r\n        this.refresh();\r\n\r\n        grid.emit(\"onCheckChange\", data, checked);\r\n    }\r\n\r\n    // обновляет таблицу\r\n    public refresh(): void {\r\n        if (this.isRendered()) {\r\n            this.onDelayRefresh();\r\n        }\r\n    }\r\n\r\n    // находит модель данных по NODE узлу\r\n    public getRecordByEl(el: HTMLElement): T {\r\n        let nodeTr: HTMLTableRowElement = findParentNode(el, \"tr\", this.ref(ViewGrid.REFS.DATA)) as HTMLTableRowElement;\r\n\r\n        if (nodeTr) {\r\n            let idRow: string = nodeTr.getAttribute(\"data-row\");\r\n\r\n            if (this.dataHash.hasOwnProperty(idRow)) {\r\n                let index: number = this.dataHash[idRow];\r\n\r\n                return this.dataList[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // обновляет строку у таблицы по записи\r\n    public updateRowByData(data: T): void {\r\n        let idRow: any = this.props.getId(data);\r\n        this.updateRowById(idRow);\r\n    }\r\n\r\n    // обновляет строку у таблицы по id\r\n    public updateRowById(idRow: any): void {\r\n        if (this.renderedHash.hasOwnProperty(idRow)) {\r\n            let index: number = this.renderedHash[idRow];\r\n            let row: IRow<T> = this.renderedList[index];\r\n\r\n            this.renderRow(row);\r\n        }\r\n    }\r\n\r\n    // можно переопределить внутри плагина. по умолчанию мы ничего не регулируем\r\n    public regulateRange(range: IRange): IRange {\r\n        return {\r\n            start: range.start,\r\n            finish: range.finish\r\n        };\r\n    }\r\n\r\n    // возвращает информацию по записи\r\n    // находится ли она в зоне видимости или нет\r\n    // на какой позиции (index)\r\n    public getVisibleInfo(data: T): IVisibleInfo {\r\n        let range: IRange = this.findVisibleRange();\r\n        let idRow: any = this.props.getId(data);\r\n\r\n        // для плагинов. этот метод может быть переопределен\r\n        let info: IVisibleInfo = this.regulateRange(range) as IVisibleInfo;\r\n\r\n        // смещение сверху и снизу\r\n        info.shiftTop = info.start - range.start;\r\n        info.shiftBottom = range.finish - info.finish;\r\n\r\n        // позиция записи и находится ли она в области видимости\r\n        info.index = null;\r\n        info.inRange = false;\r\n\r\n        if (this.dataHash.hasOwnProperty(idRow)) {\r\n            info.index = this.dataHash[idRow];\r\n\r\n            if (info.start <= info.index && info.index < info.finish) {\r\n                info.inRange = true;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    // отложенный вызов обновления размеров таблицы\r\n    public asyncUpdateSize(): void {\r\n        this.parent.emit(\"onChangeFrameSize\");\r\n\r\n        if (this.resizeTimer === null) {\r\n            this.resizeTimer = window.setTimeout(() => {\r\n                this.resizeTimer = null;\r\n                this.updateSize();\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    // обновление размеров таблицы\r\n    public updateSize(): void {\r\n        let head: HeadGrid<T> = this.parent.getHead();\r\n        let content: HTMLDivElement = this.ref(ViewGrid.REFS.CONTENT) as HTMLDivElement;\r\n\r\n        let boundContent: ClientRect = content.getBoundingClientRect();\r\n\r\n        if (boundContent.width === 0 && boundContent.height === 0) {\r\n            this.setDirty(true);\r\n            return;\r\n        }\r\n\r\n        // если изменились размеры фрейма\r\n        let changeSize: boolean = this.width !== boundContent.width || this.height !== boundContent.height;\r\n        // если мы пытались вызвать рефреш, когда таблица была спрятана\r\n        let shouldRefresh: boolean = this.dirty;\r\n        // бага в ФФ. когда у таблицы стоит display: none,\r\n        // а потом display: block, scrollTop слетает в 0\r\n        let changeScrollTop: boolean = this.scrollTop !== content.scrollTop;\r\n\r\n        if (changeSize || shouldRefresh || changeScrollTop) {\r\n            this.width = boundContent.width;\r\n            this.height = boundContent.height;\r\n\r\n            let iframe: HTMLDivElement = this.ref(ViewGrid.REFS.IFRAME) as HTMLDivElement;\r\n            let boundIframe: ClientRect = iframe.getBoundingClientRect();\r\n            this.iframeWidth = boundIframe.width;\r\n            this.iframeHeight = boundIframe.height;\r\n\r\n            // бага в ФФ. восстановим позицию слетевшего скрола\r\n            if (changeScrollTop) {\r\n                content.scrollTop = this.scrollTop;\r\n            }\r\n\r\n            this.parent.emit(\"onChangeViewSize\", this.width, this.height);\r\n\r\n            if (this.dirty) {\r\n                this.setDirty(false);\r\n            }\r\n\r\n            head.refreshColSize();\r\n        }\r\n    }\r\n\r\n    // добавляет для компонент синхронизации\r\n    public addSyncTable(syncTable: Component<any>): void {\r\n        this.syncTableList.push(syncTable);\r\n    }\r\n\r\n    // получает список компонентов для синхронизации\r\n    public getSyncTableList(): Component<any>[] {\r\n        return this.syncTableList;\r\n    }\r\n\r\n    // обновляет таблицу с задержкой\r\n    protected onDelayRefresh(): void {\r\n        if (this.refreshTimer === null) {\r\n            this.refreshTimer = window.setTimeout(() => {\r\n                this.refreshTimer = null;\r\n\r\n                // выполним обновление\r\n                this.executeRefresh();\r\n            }, 1);\r\n        }\r\n    }\r\n\r\n    // обновляет список для рендеринга и производит рендеринг\r\n    protected executeRefresh(): void {\r\n        this.updateListRender();\r\n\r\n        if (this.isRendered()) {\r\n            this.viewRefresh(false);\r\n        }\r\n    }\r\n\r\n    // обновляет контент таблицы\r\n    // onlyInsertOrRemove - делать проверку только на добавление \\ удаление\r\n    //                      игнорировать проверку изменений\r\n    protected viewRefresh(onlyInsertOrRemove: boolean): void {\r\n        // если ширина и высота таблицы равна по нулям, то скорее всего она скрыта\r\n        // ее нужно пометить как \"грязную\" и прекратить refresh\r\n        if (!this.width && !this.height) {\r\n            this.setDirty(true);\r\n            return;\r\n        }\r\n\r\n        // обновим позицию скрола\r\n        this.renderScrollTop = this.scrollTop;\r\n        this.renderScrollLeft = this.scrollLeft;\r\n\r\n        let body: HTMLTableElement = this.ref(ViewGrid.REFS.BODY) as HTMLTableElement;\r\n        let range: IRange = this.findDisplayRange();\r\n        let dataList: T[] = this.getRenderList(range);\r\n\r\n        // обновим позицию buffer зоны\r\n        this.updatePositionBuffer(range);\r\n\r\n        this.updateEmptyRow(body, dataList.length);\r\n        this.renderData(this as any, body, range, dataList, onlyInsertOrRemove);\r\n\r\n        this.updateTableWidth();\r\n        this.updateScrollBar();\r\n\r\n        this.parent.emit(\"onRefresh\", onlyInsertOrRemove);\r\n    }\r\n\r\n    // обновляет контент у таблицы\r\n    // body - контейнер куда вставлять новые записи\r\n    // range - диапазон \"с\" \"по\" записей которые нужно прорендерить\r\n    // currContent - контент, в котором хранится список записей, которые уже были прорендерены\r\n    // recordList - список record'ов которые нужно прорендерить\r\n    // onlyInsertOrRemove - простое обновление, игнорировать update row\r\n    protected renderData(\r\n        context: IContext<T>,\r\n        body: HTMLTableElement,\r\n        range: IRange,\r\n        dataList: T[],\r\n        onlyInsertOrRemove: boolean\r\n    ): void {\r\n        let currRenderedList: IRow<T>[] = context.renderedList;\r\n        let currRenderedHash: IHashMap<number> = context.renderedHash;\r\n\r\n        let nextRenderedList: IRow<T>[];\r\n        let nextRenderedHash: IHashMap<number> = {};\r\n        let index: number = 0;\r\n\r\n        dataList = dataList.filter((item: T) => {\r\n            let idRow: any = this.props.getId(item);\r\n\r\n            // защита, чтобы небыло дублированных ключей из за этого падает таблица\r\n            if (nextRenderedHash.hasOwnProperty(idRow)) {\r\n                this.printError(idRow, dataList);\r\n                return false;\r\n            }\r\n\r\n            nextRenderedHash[idRow] = index++;\r\n            return true;\r\n        });\r\n\r\n        // создадим новый контент\r\n        nextRenderedList = dataList.map((item: T, i: number) => {\r\n            let idRow: any = this.props.getId(item);\r\n            let selected: boolean = this.selectedHash.hasOwnProperty(idRow);\r\n\r\n            let row: IRow<T>;\r\n\r\n            if (currRenderedHash.hasOwnProperty(idRow)) {\r\n                row = currRenderedList[currRenderedHash[idRow]];\r\n\r\n                row.idRow = idRow;\r\n                row.data = item;\r\n                row.selected = selected;\r\n                row.index = range.start + i;\r\n\r\n                if (onlyInsertOrRemove) {\r\n                    return row;\r\n                }\r\n\r\n                this.renderRow(row);\r\n\r\n                return row;\r\n            }\r\n\r\n            row = {\r\n                idRow,\r\n                data: item,\r\n                selected,\r\n                index: range.start + i,\r\n                dataCells: { id: null, children: [] },\r\n                node: document.createElement(\"tr\")\r\n            };\r\n\r\n            this.renderRow(row);\r\n\r\n            return row;\r\n        });\r\n\r\n        // ------------------------------\r\n        // найдем изменения и применим их\r\n\r\n        // удалим все не нужные ноды\r\n        currRenderedList.forEach((currRow: IRow<T>) => {\r\n            if (!nextRenderedHash.hasOwnProperty(currRow.idRow)) {\r\n                currRow.node.parentNode.removeChild(currRow.node);\r\n                currRow.node = null;\r\n            }\r\n        });\r\n\r\n        // добавим все необходимые ноды или\r\n        // переместим их (допустим при сортировке)\r\n        nextRenderedList.forEach((nextRow: IRow<T>, i: number) => {\r\n            if (i < body.children.length) {\r\n                let node: Node = body.children[i];\r\n\r\n                if (nextRow.node !== node) {\r\n                    body.insertBefore(nextRow.node, node);\r\n                }\r\n            } else {\r\n                body.appendChild(nextRow.node);\r\n            }\r\n        });\r\n\r\n        // сохраним новое состояние для следующего использования\r\n        context.renderedList = nextRenderedList;\r\n        context.renderedHash = nextRenderedHash;\r\n    }\r\n\r\n    // обновляет список записей для рендера, он может поменятся\r\n    // допустим применив сортировку или фильтры в сторе\r\n    protected updateListRender(): void {\r\n        this.dataList = [];\r\n        this.dataHash = {};\r\n\r\n        this.rawList.forEach((item: T) => {\r\n            let idRow: any = this.props.getId(item);\r\n\r\n            this.dataList.push(item);\r\n            this.dataHash[idRow] = item;\r\n        });\r\n    }\r\n\r\n    // --------------------------------\r\n\r\n    protected beforeInit(): void {\r\n        let props: IViewProps<T> = this.props;\r\n\r\n        if (typeof props.multiSelect !== \"boolean\") {\r\n            props.multiSelect = false;\r\n        }\r\n\r\n        if (typeof props.emptyRowText !== \"string\") {\r\n            props.emptyRowText = \"Нет данных для отображения.\";\r\n        }\r\n\r\n        if (typeof props.bufferEnable !== \"boolean\") {\r\n            props.bufferEnable = true;\r\n        }\r\n\r\n        if (typeof props.bufferHeight !== \"number\") {\r\n            props.bufferHeight = 29;\r\n        }\r\n\r\n        if (typeof props.bufferStock !== \"number\") {\r\n            props.bufferStock = 10;\r\n        }\r\n\r\n        if (typeof props.bufferScrollMin !== \"number\") {\r\n            props.bufferScrollMin = 250;\r\n        }\r\n\r\n        this.dataList = [];\r\n        this.dataHash = {};\r\n        this.renderedList = [];\r\n        this.renderedHash = {};\r\n        this.selectedList = [];\r\n        this.selectedHash = {};\r\n\r\n        this.resizeTimer = null;\r\n        this.refreshTimer = null;\r\n        this.dirty = false;\r\n\r\n        this.syncTableList = [];\r\n        this.showingEmptyRow = false;\r\n        this.emptyRowColsLn = null;\r\n\r\n        this.scrollTop = 0;\r\n        this.scrollLeft = 0;\r\n        this.renderScrollTop = 0;\r\n        this.renderScrollLeft = 0;\r\n\r\n        this.width = null;\r\n        this.height = null;\r\n        this.iframeWidth = null;\r\n        this.iframeHeight = null;\r\n\r\n        this.mouseX = null;\r\n        this.mouseY = null;\r\n\r\n        this.warnings = {};\r\n\r\n        this.listenersFrame = {\r\n            resize: () => {\r\n                this.asyncUpdateSize();\r\n            }\r\n        };\r\n    }\r\n\r\n    // вызывается перед рендерингом\r\n    protected beforeMount(): void {\r\n        injectScrollbarInfo();\r\n    }\r\n\r\n    // вызывается после рендеринга\r\n    protected afterMount(): void {\r\n        let iframe: HTMLFrameElement = this.ref(ViewGrid.REFS.IFRAME) as HTMLFrameElement;\r\n        if (iframe.contentWindow) {\r\n            event.on(iframe.contentWindow as any, this.listenersFrame);\r\n        } else {\r\n            console.error(\"contentWindow not found!\");\r\n        }\r\n    }\r\n\r\n    // вызывается перед демонтированием\r\n    protected beforeUnmount(): void {\r\n        let iframe: HTMLFrameElement = this.ref(ViewGrid.REFS.IFRAME) as HTMLFrameElement;\r\n        event.off(iframe.contentWindow as any, this.listenersFrame);\r\n\r\n        if (this.resizeTimer !== null) {\r\n            clearTimeout(this.resizeTimer);\r\n            this.resizeTimer = null;\r\n        }\r\n\r\n        if (this.refreshTimer !== null) {\r\n            clearTimeout(this.refreshTimer);\r\n            this.refreshTimer = null;\r\n        }\r\n    }\r\n\r\n    // устанавливает компонент в состояние \"грязный\", что говорит о том что его нужно прорефрешить\r\n    private setDirty(dirty: boolean): void {\r\n        // исскуственно изменяем размеры чтобы сработало событие resize\r\n        this.css(ViewGrid.REFS.IFRAME, {\r\n            width: dirty ? `10%` : \"\",\r\n            height: dirty ? `10%` : \"\"\r\n        });\r\n\r\n        this.dirty = dirty;\r\n    }\r\n\r\n    // --------------------------------\r\n\r\n    // добавляет строку, если данных в таблице нет\r\n    private updateEmptyRow(body: HTMLTableElement, dataListLn: number): void {\r\n        let columnsLn: number = this.props.columns.length;\r\n        let tr: HTMLTableRowElement;\r\n\r\n        if (this.showingEmptyRow) {\r\n            // удаляем строчку, если данные появились\r\n            if (dataListLn > 0) {\r\n                this.showingEmptyRow = false;\r\n\r\n                body.removeChild(body.children[0]);\r\n            } else {\r\n                dom.attr(body.children[0] as HTMLElement, {\r\n                    colspan: this.emptyRowColsLn.toString()\r\n                }, {\r\n                    colspan: columnsLn.toString()\r\n                }, false);\r\n\r\n                this.emptyRowColsLn  = columnsLn;\r\n            }\r\n        } else {\r\n            // добавляем строчку, если данные отсутствуют\r\n            if (dataListLn === 0) {\r\n                this.showingEmptyRow = true;\r\n                this.emptyRowColsLn = columnsLn;\r\n\r\n                tr = document.createElement(\"tr\");\r\n                body.appendChild(tr);\r\n\r\n                let emptyRow: IDom = {\r\n                    id: null,\r\n                    children: [{\r\n                        id: 1,\r\n                        name: \"td\",\r\n                        attr: { colspan: columnsLn.toString() },\r\n                        cl: { \"row-empty\": true },\r\n                        text: this.props.emptyRowText\r\n                    }]\r\n                };\r\n\r\n                dom.update(tr, { }, emptyRow);\r\n            }\r\n        }\r\n    }\r\n\r\n    // обновляет высоту общего контейнера и отступ внутреннего\r\n    // если включена функция отображения видимой части таблицы\r\n    private updatePositionBuffer(range: IRange): void {\r\n        let height: string = \"\";\r\n        let position: string = \"\";\r\n\r\n        if (this.props.bufferEnable) {\r\n            let rowHeight: number = this.props.bufferHeight;\r\n            let countRows: number = this.dataList.length;\r\n\r\n            height = `${rowHeight * countRows}px`;\r\n            position = `${range.start * rowHeight}px`;\r\n        }\r\n\r\n        this.css(ViewGrid.REFS.CONTAINER, { height });\r\n        this.css(ViewGrid.REFS.WRAP, { top: position });\r\n    }\r\n\r\n    // обновляет показ\\скрытие отступа в шапке таблице\r\n    // если в контенте есть\\нет скролла\r\n    private updateScrollBar(): void {\r\n        let wrapWidth: number = this.width;\r\n\r\n        if (this.props.bufferEnable) {\r\n            let rowHeight: number = this.props.bufferHeight;\r\n            let countRows: number = this.dataList.length;\r\n            let height: number = rowHeight * countRows;\r\n\r\n            if (this.getHeight() < height) {\r\n                wrapWidth -= getScrollbarSize();\r\n            }\r\n        } else {\r\n            let content: HTMLDivElement = this.ref(ViewGrid.REFS.CONTENT) as HTMLDivElement;\r\n\r\n            if (content.scrollHeight > content.clientHeight) {\r\n                wrapWidth -= getScrollbarSize();\r\n            }\r\n        }\r\n\r\n        if (wrapWidth > 0) {\r\n            let syncTableList: Component<any>[] = this.getSyncTableList();\r\n            let refName: string = ViewGrid.REFS.CONTENT;\r\n            let width: string = `${wrapWidth}px`;\r\n\r\n            syncTableList.forEach((instance: Component<any>) => {\r\n                let ref: IRef = instance.$internal.refs[refName];\r\n                if (ref) {\r\n                    dom.css(ref.node, ref.dom.css, { width }, false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // растягивает таблицу на 100% если хотябы в одной из колонок\r\n    // задана настройка flex (растянуть на всю ширину)\r\n    private updateTableWidth(): void {\r\n        let syncTableList: Component<any>[] = this.getSyncTableList();\r\n        let grid: R = this.parent;\r\n        let head: HeadGrid<T> = grid.getHead();\r\n        let width: string = head.isUseFlex() ? \"100%\" : \"\";\r\n        let refName: string = ViewGrid.REFS.TABLE;\r\n\r\n        this.css(refName, { width });\r\n\r\n        syncTableList.forEach((instance: Component<any>) => {\r\n            let ref: IRef = instance.$internal.refs[refName];\r\n            if (ref) {\r\n                dom.css(ref.node, ref.dom.css, { width }, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    // находит диапазон записей, которые нужно прорендерить\r\n    private findDisplayRange(): IRange {\r\n        if (!this.props.bufferEnable) {\r\n            return {\r\n                start: 0,\r\n                finish: this.dataList.length\r\n            };\r\n        }\r\n\r\n        let range: IRange = this.findVisibleRange();\r\n\r\n        // делаем запас\r\n        range.start -= this.props.bufferStock;\r\n        range.finish += this.props.bufferStock;\r\n\r\n        if (range.start < 0) {\r\n            range.start = 0;\r\n        }\r\n\r\n        if (range.finish > this.dataList.length) {\r\n            range.finish = this.dataList.length;\r\n        }\r\n\r\n        return range;\r\n    }\r\n\r\n    // находит видимый диапазон записей таблицы\r\n    // если строка не помещается хотябы на 1px то\r\n    // эту строку считаем как за пределами видимости\r\n    private findVisibleRange(): IRange {\r\n        let scrollTop: number = this.scrollTop;\r\n        let rowHeight: number = this.props.bufferHeight;\r\n        let countRows: number = this.dataList.length;\r\n\r\n        let start: number = Math.ceil(scrollTop / rowHeight);\r\n        let finish: number = Math.floor((scrollTop + this.height) / rowHeight);\r\n\r\n        if (finish > countRows) {\r\n            finish = countRows;\r\n        }\r\n\r\n        return { start, finish };\r\n    }\r\n\r\n    // получает список записей, которые нужно прорендерить\r\n    private getRenderList(range: IRange): T[] {\r\n        let result: T[] = [];\r\n\r\n        for (let i: number = range.start; i < range.finish; ++i) {\r\n            result.push(this.dataList[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // формирует контент для строки\r\n    private getDataCells(row: IRow<T>, columns: IColumn<T, R>[], defaultMeta: IHashMapAny): IDom[] {\r\n        return columns.map((column: IColumn<T, R>, index: number) => {\r\n            let value: string;\r\n            let meta: IMeta<T, R> = {\r\n                view: this.parent,\r\n                row,\r\n                column,\r\n                data: row.data,\r\n                attr: { \"data-index\": index.toString() },\r\n                cl: { \"ngrid-cell\": true },\r\n                css: {}\r\n            };\r\n\r\n            if (defaultMeta) {\r\n                for (let key in defaultMeta) {\r\n                    if (defaultMeta.hasOwnProperty(key)) {\r\n                        meta[key] = defaultMeta[key];\r\n                    }\r\n                }\r\n            }\r\n\r\n            try {\r\n                value = HeadGrid.columns[column.xtype].renderer(row.data, meta);\r\n\r\n                if (value === \"\" || value === undefined || value === null) {\r\n                    value = \"&nbsp;\";\r\n                }\r\n            } catch (e) {\r\n                value = \"\";\r\n\r\n                console.error(e);\r\n            }\r\n\r\n            if (column.align) {\r\n                meta.cl[`row-${column.align}`] = true;\r\n            }\r\n\r\n            if (column.tdCls) {\r\n                merge(meta.cl, column.tdCls);\r\n            }\r\n\r\n            return {\r\n                id: column.id,\r\n                name: \"td\",\r\n                attr: meta.attr,\r\n                cl: meta.cl,\r\n                css: meta.css,\r\n                text: value\r\n            };\r\n        });\r\n    }\r\n\r\n    // рендерит строку\r\n    private renderRow(row: IRow<T>): void {\r\n        let columns: IColumn<T, R>[] = this.props.columns as IColumn<T, R>[];\r\n        let currCells: IDom = row.dataCells;\r\n        let nextCells: IDom = {\r\n            id: null,\r\n            attr: { \"data-row\": row.idRow },\r\n            cl: { \"row-selected\": row.selected },\r\n            children: this.getDataCells(row, columns, null)\r\n        };\r\n\r\n        dom.update(row.node, currCells, nextCells);\r\n\r\n        row.dataCells = nextCells;\r\n    }\r\n\r\n    // при изменении вертикального скролла\r\n    private changeScrollTop(): void {\r\n        // если буферизация выключена, выходим\r\n        if (this.props.bufferEnable) {\r\n            if (Math.abs(this.renderScrollTop - this.scrollTop) > this.props.bufferScrollMin) {\r\n                this.viewRefresh(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    // при изменении горизонтального скролла\r\n    private changeScrollLeft(): void {\r\n        let syncTableList: Component<any>[] = this.getSyncTableList();\r\n        let content: HTMLDivElement = this.ref(ViewGrid.REFS.CONTENT) as HTMLDivElement;\r\n        let left: string = `-${content.scrollLeft}px`;\r\n        let refName: string = ViewGrid.REFS.TABLE;\r\n\r\n        this.scrollLeft = content.scrollLeft;\r\n\r\n        syncTableList.forEach((instance: Component<any>) => {\r\n            let ref: IRef = instance.$internal.refs[refName];\r\n            if (ref) {\r\n                dom.css(ref.node, ref.dom.css, { left }, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // приватные методы для работы с контентом таблицы\r\n\r\n    // bind events\r\n\r\n    @on(ViewGrid.REFS.CONTENT, \"scroll\")\r\n    private onScroll(): void {\r\n        let content: HTMLDivElement = this.ref(ViewGrid.REFS.CONTENT) as HTMLDivElement;\r\n\r\n        if (this.scrollTop !== content.scrollTop) {\r\n            this.scrollTop = content.scrollTop;\r\n\r\n            this.changeScrollTop();\r\n        }\r\n\r\n        if (this.scrollLeft !== content.scrollLeft) {\r\n            this.scrollLeft = content.scrollLeft;\r\n\r\n            this.changeScrollLeft();\r\n        }\r\n\r\n        this.parent.emit(\"onScroll\", content.scrollTop, content.scrollLeft);\r\n    }\r\n\r\n    @on(ViewGrid.REFS.WRAP, \"mousedown\")\r\n    private onMouseDown(e: MouseEvent): void {\r\n        this.mouseX = e.clientX;\r\n        this.mouseY = e.clientY;\r\n\r\n        this.processEvent(e, \"MouseDown\", this.ref(ViewGrid.REFS.WRAP), false);\r\n    }\r\n\r\n    @on(ViewGrid.REFS.WRAP, \"mouseup\")\r\n    private onMouseUp(e: MouseEvent): void {\r\n        this.processEvent(e, \"MouseUp\", this.ref(ViewGrid.REFS.WRAP), false);\r\n    }\r\n\r\n    @on(ViewGrid.REFS.WRAP, \"mousemove\")\r\n    private onMouseMove(e: MouseEvent): void {\r\n        this.processEvent(e, \"MouseMove\", this.ref(ViewGrid.REFS.WRAP), false);\r\n    }\r\n\r\n    @on(ViewGrid.REFS.WRAP, \"click\")\r\n    private onClick(e: MouseEvent): void {\r\n        this.processEvent(e, \"Click\", this.ref(ViewGrid.REFS.WRAP), true);\r\n    }\r\n\r\n    @on(ViewGrid.REFS.WRAP, \"dblclick\")\r\n    private onDblClick(e: MouseEvent): void {\r\n        this.processEvent(e, \"Dblclick\", this.ref(ViewGrid.REFS.WRAP), true);\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n\r\n    /* tslint:disable:max-line-length */\r\n    private processEvent(e: MouseEvent, eventName: string, rootNode: Node, needCheckAccuracy: boolean): void {\r\n        let nodeTd: HTMLTableDataCellElement = findParentNode(e.target as Node, \"td\", rootNode) as HTMLTableDataCellElement;\r\n        let nodeTr: HTMLTableRowElement = findParentNode(nodeTd, \"tr\", rootNode) as HTMLTableRowElement;\r\n\r\n        if (nodeTr && nodeTd) {\r\n            let idRow: string = nodeTr.getAttribute(\"data-row\");\r\n            let index: string = nodeTd.getAttribute(\"data-index\");\r\n\r\n            if (this.renderedHash.hasOwnProperty(idRow)) {\r\n                let grid: R = this.parent;\r\n                let column: IColumn<T, R> = this.props.columns[index];\r\n                let row: IRow<T> = this.renderedList[this.renderedHash[idRow]];\r\n\r\n                if (needCheckAccuracy && column.accuracyClick) {\r\n                    if (this.mouseX !== e.clientX || this.mouseY !== e.clientY) {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (grid.emit(`onBeforeCell${eventName}`, nodeTd, index, row.data, nodeTr, row.index, e, column) !== false) {\r\n                    grid.emit(`onCell${eventName}`, nodeTd, index, row.data, nodeTr, row.index, e, column);\r\n\r\n                    if (grid.emit(`onBeforeItem${eventName}`, row.data, nodeTr, row.index, e) !== false) {\r\n                        grid.emit(`onItem${eventName}`, row.data, nodeTr, row.index, e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /* tslint:enable:max-line-length */\r\n\r\n    // --------------------------------------------------------\r\n\r\n    // выводит сообщение об ошибке, когда пытаются прорендерить 2+ записи с одинаковым id\r\n    private printError(idRow: any, dataList: T[]): void {\r\n        // чтобы не хламить уведомления в консоли, будем выводить один раз\r\n        if (!this.warnings.hasOwnProperty(idRow)) {\r\n            this.warnings[idRow] = true;\r\n\r\n            console.error(`found row with the same key (${idRow})! record will not be displayed!`);\r\n\r\n            dataList.forEach((item: T) => {\r\n                let itemIdRow: any = this.props.getId(item);\r\n                if (idRow === itemIdRow) {\r\n                    console.error(item);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private fireManyEvents(data: T[], eventName: string, stopEvent: boolean): boolean {\r\n        let ln = data.length;\r\n        let successFireEvent;\r\n\r\n        let grid: R = this.parent;\r\n\r\n        for (let i = 0; i < ln; ++i) {\r\n            successFireEvent = grid.emit(eventName, grid, data[i]) !== false;\r\n\r\n            if (stopEvent && !successFireEvent) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","\r\nexport const ICONS = {\r\n    HEADER_ARROW: \"sort\",\r\n    CHECKBOX: \"checkbox\",\r\n    CHECKBOX_CHECKED: \"checkbox_checked\",\r\n    CHECKBOX_SQUARE: \"checkbox_square\",\r\n    EXPANDED: \"expanded\",\r\n    COLLAPSED: \"collapsed\",\r\n    LEAF: \"file\",\r\n    FOLDER_OPEN: \"folder_open\",\r\n    FOLDER_CLOSE: \"foler\",\r\n    SETTINGS: \"settings\",\r\n    ADDITIONAL: \"additional\",\r\n    DRAG_DROP_OK: \"ok\",\r\n    DRAG_DROP_LOCK: \"warn\"\r\n};\r\n\r\nexport function createIcon(icon: string, classes?: string, attrs?: string): string {\r\n    let strAttr = classes ? ` class=\"${classes}\"` : \"\";\r\n    strAttr += attrs ? ` ${attrs}` : \"\";\r\n\r\n    return `<img src=\"./../../img/${icon}.png\"${strAttr} />`;\r\n}\r\n","\r\nimport { HeadGrid, IHeadProps } from \"./../../grid/headgrid/headgrid\";\r\nimport { IMeta } from \"./../../grid/viewgrid/viewgrid\";\r\nimport { Tree, INode } from \"./../tree\";\r\nimport { ICONS, createIcon } from \"./../../icons\";\r\n\r\nexport interface IHeadTreeProps<T> extends IHeadProps<T> { }\r\n\r\nexport class HeadTree<\r\n        T extends INode = INode,\r\n        P extends IHeadTreeProps<T> = IHeadTreeProps<T>,\r\n        R extends Tree<T> = Tree<T>\r\n    > extends HeadGrid<T, P, R> {\r\n    // empty\r\n}\r\n\r\n// регистрируем типы колонок\r\n\r\nlet base = HeadGrid.columns.basecolumn;\r\n\r\nHeadGrid.registerColumn({\r\n    xtype: \"treecolumn\",\r\n    renderer<T extends INode, R extends Tree<T>>(node: T, meta: IMeta<T>) {\r\n        let tree: R = meta.view as R;\r\n        let depth: number = tree.props.rootVisible ? node.depth : node.depth - 1;\r\n        let paddingLeft: number = 6 + (depth * 10);\r\n        let circleIcon: string;\r\n        let checkIcon: string;\r\n        let icon: string;\r\n\r\n        let isLeaf: boolean = node.leaf;\r\n        let expanded: boolean = node.expanded;\r\n\r\n        if (isLeaf) {\r\n            if (meta.column.showLine) {\r\n                circleIcon = `<div class=\"line${node.nextNodeId ? \"\" : \" line-angle\"}\"></div>`;\r\n            } else {\r\n                circleIcon = \"\";\r\n                paddingLeft += 12; // вместо иконки \"плюс\"\\\"минус\"\r\n            }\r\n        } else {\r\n            if (node.children.length === 0) {\r\n                circleIcon = \"\";\r\n                paddingLeft += 12; // вместо иконки \"плюс\"\\\"минус\"\r\n            } else {\r\n                let circleIconId = expanded ? ICONS.EXPANDED : ICONS.COLLAPSED;\r\n                circleIcon = createIcon(circleIconId, \"image\", 'action=\"expand\"');\r\n            }\r\n        }\r\n\r\n        if (meta.column.checkbox === false) {\r\n            checkIcon = \"\";\r\n        } else {\r\n            let checkIconId: string;\r\n            if (tree.props.syncCheckbox && node.checkedUndetermined) {\r\n                checkIconId = ICONS.CHECKBOX_SQUARE;\r\n            } else {\r\n                checkIconId = node.checked ? ICONS.CHECKBOX_CHECKED : ICONS.CHECKBOX;\r\n            }\r\n\r\n            checkIcon = createIcon(checkIconId, \"image check\", `action=\"check\"`);\r\n        }\r\n\r\n        if (meta.column.hideIcon) {\r\n            icon = \"\";\r\n        } else {\r\n            let iconId: string = node.icon;\r\n            if (!iconId) {\r\n                iconId = isLeaf ? ICONS.LEAF : (expanded ? ICONS.FOLDER_OPEN : ICONS.FOLDER_CLOSE);\r\n            }\r\n\r\n            icon = createIcon(iconId, \"image icon\");\r\n        }\r\n\r\n        meta.cl.treecolumn = true;\r\n        meta.css.paddingLeft = `${paddingLeft}px`;\r\n\r\n        let value: string = base.renderer(node, meta);\r\n\r\n        return `${circleIcon}${checkIcon}${icon}<span class=\"text\">${value}</span>`;\r\n    }\r\n});\r\n","\r\nimport { Component, template, IComponentProps, methodCall } from \"core\";\r\nimport { IHashMap } from \"core\";\r\nimport { ViewTree } from \"./../../viewtree/viewtree\";\r\nimport { IRow } from \"./../../../grid/viewgrid/viewgrid\";\r\n\r\n@template({\r\n    html: [\r\n        `<table ref=\"table\">`,\r\n            `<colgroup ref=\"cols\"></colgroup>`,\r\n            `<tbody ref=\"body\"></tbody>`,\r\n        `</table>`\r\n    ].join(\"\"),\r\n    root: {\r\n        tagName: \"div\",\r\n        ref: \"wrap\",\r\n        cl: {\r\n            npinrow: true\r\n        }\r\n    }\r\n})\r\nexport class Row<T> extends Component<IComponentProps> {\r\n\r\n    public static REFS = {\r\n        WRAP: \"wrap\",\r\n        TABLE: \"table\",\r\n        COLS: \"cols\",\r\n        BODY: \"body\"\r\n    };\r\n\r\n    protected hidden: boolean;\r\n    protected renderedList: IRow<T>[];         // данные, которые были прорендерены (массив)\r\n    protected renderedHash: IHashMap<any>;     // данные, которые были прорендерены (ключ -> индекс)\r\n\r\n    public show(): void {\r\n        this.hide(false);\r\n    }\r\n\r\n    public hide(hidden: boolean = true): void {\r\n        this.hidden = hidden;\r\n        this.css(Row.REFS.WRAP, { display: hidden ? \"none\" : \"block\" });\r\n    }\r\n\r\n    public setPosition(top: number): void {\r\n        this.css(Row.REFS.WRAP, { top: top ? `${top}px` : `` });\r\n    }\r\n\r\n    public isHidden(): boolean {\r\n        return this.hidden;\r\n    }\r\n\r\n    public renderData(view: ViewTree<T>, nextNode: T, onlyInsertOrRemove: boolean): void {\r\n        let currNode: T = this.renderedList.length > 0 ? this.renderedList[0].data : null;\r\n\r\n        if (!onlyInsertOrRemove || currNode !== nextNode) {\r\n            let nodeList: T[] = nextNode ? [nextNode] : [];\r\n            let body: HTMLTableElement = this.ref(Row.REFS.BODY) as HTMLTableElement;\r\n\r\n            methodCall(view, \"renderData\", [this, body, { start: 0 }, nodeList, false]);\r\n        }\r\n    }\r\n\r\n    private beforeInit(): void {\r\n        this.renderedList = [];\r\n        this.renderedHash = {};\r\n    }\r\n}\r\n","\r\nimport { Component, template, on, IComponentProps, methodCall } from \"core\";\r\nimport { IHashMap } from \"core\";\r\nimport { findParentNode } from \"./../../../utils/util\";\r\nimport { Tree, INode } from \"./../../tree\";\r\nimport { HeadTree } from \"../../headtree/headtree\";\r\nimport { ViewTree } from \"./../../viewtree/viewtree\";\r\nimport { IRow, IRange } from \"./../../../grid/viewgrid/viewgrid\";\r\nimport { supportSticky } from \"./../../../grid/plugins/supportSticky\";\r\nimport { Row } from \"./Row\";\r\nimport { writeProperty, reedProperty } from \"./../../../utils/util\";\r\n\r\nexport enum PIN_ROW_MODE {\r\n    HIDDEN = 0, // плагин выключен\r\n    ROOT = 1,   // прикреплять корневой узел\r\n    NODE = 2,   // прикреплять последний узел\r\n    GROUP = 3   // прикреплять группу узлов\r\n}\r\n\r\nexport interface IContainerProps extends IComponentProps {\r\n    mode: PIN_ROW_MODE;\r\n}\r\n\r\ninterface IPinRowInfo<T extends INode> {\r\n    node: T;\r\n    offset: number;\r\n}\r\n\r\n@template({\r\n    html: \"\",\r\n    root: {\r\n        tagName: \"div\",\r\n        ref: \"content\",\r\n        cl: {\r\n            ngridpinrow: true,\r\n            sticky: supportSticky,\r\n            fixed: !supportSticky\r\n        }\r\n    }\r\n})\r\nexport class Container<T extends INode> extends Component<IContainerProps> {\r\n\r\n    public static REFS = {\r\n        CONTENT: \"content\"\r\n    };\r\n\r\n    private mode: PIN_ROW_MODE;\r\n    private tree: Tree<T>;\r\n    private rowList: Row<T>[];\r\n    private positionScrollTop: number;\r\n\r\n    public setMode(mode: PIN_ROW_MODE): void {\r\n        this.mode = mode;\r\n\r\n        let hidden: boolean = mode === PIN_ROW_MODE.HIDDEN;\r\n        this.css(Container.REFS.CONTENT, { display: hidden ? \"none\" : \"block\" });\r\n\r\n        if (this.isRendered() && !hidden) {\r\n            this.refresh(false);\r\n        }\r\n    }\r\n\r\n    public attachTree(tree: Tree<T>): void {\r\n        this.tree = tree;\r\n\r\n        // @override\r\n        let view: ViewTree<T> = tree.getView() as ViewTree<T>;\r\n        let originalRegulateRange: (range: IRange) => IRange = reedProperty(view, \"regulateRange\");\r\n\r\n        writeProperty(view, \"regulateRange\", (range: IRange): IRange => {\r\n            range = originalRegulateRange(range);\r\n\r\n            let showPins: number = this.rowList.reduce((result: number, row: Row<T>) => {\r\n                return result + (row.isHidden() ? 0 : 1);\r\n            }, 0);\r\n\r\n            range.start += showPins;\r\n\r\n            return range;\r\n        });\r\n    }\r\n\r\n    public refresh(onlyInsertOrRemove: boolean): void {\r\n        if (this.mode === PIN_ROW_MODE.HIDDEN) {\r\n            return;\r\n        }\r\n\r\n        this.updateByMode(onlyInsertOrRemove);\r\n    }\r\n\r\n    private updateByMode(onlyInsertOrRemove: boolean): void {\r\n        switch (this.mode) {\r\n            case PIN_ROW_MODE.ROOT:\r\n                this.updatePinRoot(onlyInsertOrRemove);\r\n                break;\r\n            case PIN_ROW_MODE.NODE:\r\n                this.updatePinNode(onlyInsertOrRemove);\r\n                break;\r\n            case PIN_ROW_MODE.GROUP:\r\n                this.updatePinGroupNode(onlyInsertOrRemove);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private updatePinRoot(onlyInsertOrRemove: boolean): void {\r\n        let view: ViewTree<T> = this.tree.getView() as ViewTree<T>;\r\n        let root: T = this.tree.getData()[0] || null;\r\n        let row = this.rowList[0];\r\n\r\n        if (!this.tree.props.rootVisible) {\r\n            root = root.children[0] as T;\r\n        }\r\n\r\n        row.setPosition(0);\r\n        row.renderData(view, root, onlyInsertOrRemove);\r\n\r\n        this.rowList.forEach((pinRow, index) => {\r\n            if (index > 0) {\r\n                pinRow.hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    private updatePinNode(onlyInsertOrRemove: boolean): void {\r\n        let view: ViewTree<T> = this.tree.getView() as ViewTree<T>;\r\n        let scrollTop: number = reedProperty(view, \"scrollTop\");\r\n        let dataList: T[] = reedProperty(view, \"dataList\");\r\n        let bufferHeight: number = view.props.bufferHeight;\r\n\r\n        if (onlyInsertOrRemove && scrollTop === this.positionScrollTop) {\r\n            return;\r\n        }\r\n\r\n        this.positionScrollTop = scrollTop;\r\n\r\n        let row: Row<T> = this.rowList[0];\r\n        let index: number = Math.floor(scrollTop / bufferHeight);\r\n        let first = dataList[index] || null;\r\n        let second = dataList[index + 1] || null;\r\n\r\n        if (first && first.leaf) {\r\n            first = this.tree.getRowById(first.parentNodeId);\r\n        }\r\n\r\n        let offset: number = (!second || second.leaf) ? 0 : (scrollTop - index * bufferHeight);\r\n\r\n        row.setPosition(-offset);\r\n        row.renderData(view, first, onlyInsertOrRemove);\r\n\r\n        this.rowList.forEach((r: Row<T>, i: number) => {\r\n            if (i > 0) {\r\n                r.hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    private updatePinGroupNode(onlyInsertOrRemove: boolean): void {\r\n        let view: ViewTree<T> = this.tree.getView() as ViewTree<T>;\r\n        let scrollTop: number = reedProperty(view, \"scrollTop\");\r\n        let dataList: T[] = reedProperty(view, \"dataList\");\r\n        let renderedList: IRow<T>[] = reedProperty(view, \"renderedList\");\r\n        let bufferHeight: number = view.props.bufferHeight;\r\n\r\n        if (renderedList.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (onlyInsertOrRemove && scrollTop === this.positionScrollTop) {\r\n            return;\r\n        }\r\n\r\n        this.positionScrollTop = scrollTop;\r\n\r\n        // updating\r\n\r\n        let index: number = Math.floor(scrollTop / bufferHeight);\r\n        let offset: number = scrollTop - index * bufferHeight;\r\n\r\n        let lastPinNode: T = view.getData()[0];\r\n        let pinList: IPinRowInfo<T>[] = [];\r\n\r\n        let currNode: T;\r\n        let nextNode: T;\r\n\r\n        // найдем записи которые нужно прикрепить\r\n        while (index < dataList.length) {\r\n            currNode = dataList[index];\r\n            nextNode = dataList[++index];\r\n\r\n            lastPinNode = this.findPinNode(currNode, lastPinNode);\r\n\r\n            if (lastPinNode.leaf) {\r\n                break;\r\n            }\r\n\r\n            if (nextNode && nextNode.depth <= lastPinNode.depth) {\r\n                pinList.push({ node: lastPinNode, offset });\r\n                break;\r\n            }\r\n\r\n            pinList.push({ node: lastPinNode, offset: 0 });\r\n        }\r\n\r\n        // добавим недостающие строки\r\n        if (pinList.length > this.rowList.length) {\r\n            this.addPinRows(pinList.length - this.rowList.length);\r\n        }\r\n\r\n        // добьем pinList если кол-во строк больше чем pinList\r\n        if (pinList.length < this.rowList.length) {\r\n            this.addEmptyRows(pinList, this.rowList.length - pinList.length);\r\n        }\r\n\r\n        index = this.rowList.length - 1;\r\n        pinList.forEach((pinItem: IPinRowInfo<T>, i: number) => {\r\n            let pinRow = this.rowList[index - i];\r\n\r\n            if (pinItem.node)  {\r\n                offset = i * bufferHeight - pinItem.offset;\r\n\r\n                pinRow.setPosition(Math.ceil(offset));\r\n                pinRow.renderData(view, pinItem.node, onlyInsertOrRemove);\r\n\r\n                pinRow.show();\r\n            } else {\r\n                pinRow.hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    private findPinNode(node: T, pinNode: T): T {\r\n        let parentNode: T;\r\n\r\n        while (node) {\r\n            if (node.parentNodeId !== null) {\r\n                parentNode = this.tree.getRowById(node.parentNodeId);\r\n            }\r\n\r\n            if (parentNode === pinNode) {\r\n                return node;\r\n            }\r\n\r\n            node = parentNode;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private addPinRows(count: number): void {\r\n        let head: HeadTree<T> = this.tree.getHead() as HeadTree<T>;\r\n        let view: ViewTree<T> = this.tree.getView() as ViewTree<T>;\r\n        let row: Row<T>;\r\n\r\n        for (let i = 0; i < count; ++i) {\r\n            row = new Row();\r\n\r\n            view.addSyncTable(row);\r\n            row.appendChild(this.ref(Container.REFS.CONTENT));\r\n\r\n            this.rowList.push(row);\r\n        }\r\n\r\n        head.refreshColSize();\r\n    }\r\n\r\n    private addEmptyRows(pinList: IPinRowInfo<T>[], count: number): void {\r\n        for (let i = 0; i < count; ++i) {\r\n            pinList.push({ node: null, offset: null });\r\n        }\r\n    }\r\n\r\n    @on(Container.REFS.CONTENT, \"mousedown\")\r\n    private mousedown(e: MouseEvent) {\r\n        this.processEvent(e, \"MouseDown\", this.ref(Row.REFS.WRAP), false);\r\n    }\r\n\r\n    @on(Container.REFS.CONTENT, \"mousedown\")\r\n    private click(e: MouseEvent) {\r\n        this.processEvent(e, \"Click\", this.ref(Row.REFS.WRAP), false);\r\n    }\r\n\r\n    @on(Container.REFS.CONTENT, \"mousedown\")\r\n    private mouseup(e: MouseEvent) {\r\n        this.processEvent(e, \"MouseUp\", this.ref(Row.REFS.WRAP), true);\r\n    }\r\n\r\n    @on(Container.REFS.CONTENT, \"mousedown\")\r\n    private dblclick(e: MouseEvent) {\r\n        this.processEvent(e, \"Dblclick\", this.ref(Row.REFS.WRAP), true);\r\n    }\r\n\r\n    private processEvent(event: MouseEvent, eventName: string, rootNode: Node, needCheckAccuracy: boolean): void {\r\n        let table: HTMLTableElement = findParentNode(event.target as Node, \"table\", rootNode) as HTMLTableElement;\r\n        if (!table) {\r\n            return;\r\n        }\r\n\r\n        let index: number = Array.prototype.indexOf.call(this.ref(Container.REFS.CONTENT).children, table.parentNode);\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        let view: ViewTree<T> = this.tree.getView() as ViewTree<T>;\r\n        let row: Row<T> = this.rowList[index];\r\n\r\n        // считываем состояния\r\n        let viewRenderedList: IRow<T>[] = reedProperty(view, \"renderedList\");\r\n        let viewRenderedHash: IHashMap<number> = reedProperty(view, \"renderedHash\");\r\n        let rowRenderedList: IRow<T>[] = reedProperty(row, \"renderedList\");\r\n        let rowRenderedHash: IHashMap<number> = reedProperty(row, \"renderedHash\");\r\n\r\n        // временно подменим\r\n        writeProperty(view, \"renderedList\", rowRenderedList);\r\n        writeProperty(view, \"renderedHash\", rowRenderedHash);\r\n\r\n        try {\r\n            methodCall(view, \"processEvent\", [event, eventName, div, needCheckAccuracy]);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n\r\n        // вернем обратно\r\n        writeProperty(view, \"renderedList\", viewRenderedList);\r\n        writeProperty(view, \"renderedHash\", viewRenderedHash);\r\n    }\r\n\r\n    private beforeInit(): void {\r\n        if (typeof this.props.mode !== \"number\") {\r\n            this.props.mode = PIN_ROW_MODE.HIDDEN;\r\n        }\r\n    }\r\n\r\n    private afterInit(): void {\r\n        this.setMode(this.props.mode);\r\n    }\r\n\r\n    private beforeMount(): void {\r\n        let content: HTMLDivElement = this.ref(Container.REFS.CONTENT) as HTMLDivElement;\r\n\r\n        this.rowList = [this.createRow()];\r\n\r\n        this.rowList.forEach((row: Row<T>) => {\r\n            row.appendChild(content);\r\n        });\r\n    }\r\n\r\n    private beforeUnmount(): void {\r\n        this.rowList.forEach((row: Row<T>) => {\r\n            row.remove();\r\n        });\r\n\r\n        this.rowList = null;\r\n    }\r\n\r\n    private createRow(): Row<T> {\r\n        let row: Row<T> = new Row();\r\n        let view: ViewTree<T> = this.tree.getView() as ViewTree<T>;\r\n\r\n        // очень важно!!! для синхронизации с основной таблицей\r\n        view.addSyncTable(row);\r\n\r\n        return row;\r\n    }\r\n}\r\n","\r\nimport { methodCall } from \"core\";\r\nimport { Tree } from \"./../../tree\";\r\nimport { ViewTree } from \"../../viewtree/viewtree\";\r\nimport { IPlugin, IPluginProps } from \"./../../../grid/plugins/plugin\";\r\nimport { Container, PIN_ROW_MODE } from \"./container\";\r\n\r\nexport { PIN_ROW_MODE };\r\n\r\nexport class PinRowPlugin<T> implements IPlugin {\r\n\r\n    private tree: Tree<T>;\r\n    private container: Container<T>;\r\n\r\n    constructor(props: IPluginProps, tree: Tree<T>) {\r\n        this.tree = tree;\r\n        this.container = new Container({ mode: props.mode });\r\n\r\n        this.container.attachTree(tree);\r\n\r\n        this.tree.on(\"onRefresh\", (tr: Tree<T>, onlyInsertOrRemove: boolean) => {\r\n            this.container.refresh(onlyInsertOrRemove);\r\n        });\r\n\r\n        this.tree.on(\"onScroll\", (tr: Tree<T>, onlyInsertOrRemove: boolean) => {\r\n            this.container.refresh(onlyInsertOrRemove);\r\n        });\r\n    }\r\n\r\n    public setMode(mode: PIN_ROW_MODE): void {\r\n        this.container.setMode(mode);\r\n    }\r\n\r\n    protected mount(): void {\r\n        let view: ViewTree<T> =  this.tree.getView() as ViewTree<T>;\r\n        let content: HTMLDivElement = methodCall(view, \"ref\", [ViewTree.REFS.CONTENT]);\r\n\r\n        this.container.appendChild(content);\r\n    }\r\n\r\n    protected unmount(): void {\r\n        this.container.remove();\r\n    }\r\n}\r\n","\r\nimport { Tree } from \"./../../tree\";\r\nimport { ViewTree } from \"../../viewtree/viewtree\";\r\nimport { IPlugin, IPluginProps } from \"./../../../grid/plugins/plugin\";\r\nimport { IHashMapAny } from \"core\";\r\n\r\ninterface ICustomNode extends IHashMapAny {\r\n    $plugin_expanded?: boolean;\r\n    $plugin_filter?: boolean;\r\n    expanded?: boolean;\r\n    parentNodeId?: any;\r\n}\r\n\r\nconst escapeRegexRe = /([-.*+?\\^${}()|\\[\\]\\/\\\\])/g;\r\n\r\nexport class TreeFilterPlugin<T extends ICustomNode> implements IPlugin {\r\n\r\n    private tree: Tree<T>;\r\n    private applyingFilter: boolean;\r\n\r\n    constructor(props: IPluginProps, tree: Tree<T>) {\r\n        this.tree = tree;\r\n\r\n        let view: ViewTree<T> = tree.getView() as ViewTree<T>;\r\n\r\n        // @override\r\n        let originalFilterNode = view.filterNode;\r\n        view.filterNode = function(node: T) {\r\n            return node.$plugin_filter !== false && originalFilterNode.call(this, node);\r\n        };\r\n    }\r\n\r\n    public filter(searchText: string, fn: (node: T) => string): void {\r\n        let root: T = this.tree.getData()[0];\r\n        searchText = searchText.trim().toLowerCase();\r\n\r\n        if (searchText) {\r\n            // применим фильтр\r\n\r\n            let reg: RegExp = this.getRegex(searchText);\r\n            let success: T[] = [];\r\n\r\n            this.tree.cascadeBefore(root, (node: T) => {\r\n                // если фильтр еще не применялся, запомним его состояние\r\n                // чтобы когда фильтр сбросили, можно было вернуть в прежнее состояние\r\n                if (!this.applyingFilter)  {\r\n                    node.$plugin_expanded = node.expanded;\r\n                }\r\n\r\n                // по умолчанию все ноды скроем\r\n                node.expanded = false;\r\n\r\n                // если родительский узел прошел фильтрацию то и все его\r\n                // дочерние элементы автоматически проходят фильтрацию\r\n                if (node.parentNode && node.parentNode.$plugin_filter) {\r\n                    node.$plugin_filter = true;\r\n                } else {\r\n                    let text: string = fn ? fn(node) : node.text;\r\n\r\n                    // проверяем, подходит ли узел фильтрацию\r\n                    if (text.match(reg)) {\r\n                        node.$plugin_filter = true;\r\n                        success.push(node);\r\n                    } else {\r\n                        node.$plugin_filter = false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // каждый успошно пройденный фильтрацию узел мы будем\r\n            // поднимать до root и проставлять filter = true\r\n            // также раскроем его expanded = true\r\n            success.forEach((node: T) => {\r\n                node = tree.getRowById(node.parentNodeId);\r\n\r\n                while (node) {\r\n                    node.$plugin_filter = true;\r\n                    node.expanded = true;\r\n\r\n                    node = tree.getRowById(node.parentNodeId);\r\n                }\r\n            });\r\n        } else {\r\n            // очистим фильтр\r\n            this.tree.cascadeBefore(root, (node) => {\r\n                node.$plugin_filter = true;\r\n                node.expanded = node.$plugin_expanded;\r\n            });\r\n        }\r\n\r\n        this.applyingFilter = !!searchText;\r\n        this.tree.refresh();\r\n    }\r\n\r\n    private getRegex(str: string): RegExp {\r\n        str = str.replace(escapeRegexRe, \"\\\\$1\");\r\n        return new RegExp(str, \"i\");\r\n    }\r\n}\r\n","\r\nimport { IHashMapAny } from \"core\";\r\nimport { Grid, IGridProps } from \"./../grid/grid\";\r\n\r\nimport { IColumn } from \"./../grid/headgrid/headgrid\";\r\nimport { HeadTree, IHeadTreeProps } from \"./headtree/headtree\";\r\nimport { ViewTree, IViewTreeProps } from \"./viewtree/viewtree\";\r\n\r\nexport interface ITreeProps<T> extends IGridProps<T> {\r\n    rootVisible?: boolean;\r\n    syncCheckbox?: boolean;\r\n}\r\n\r\nexport interface INode extends IHashMapAny {\r\n    leaf?: boolean;\r\n    icon?: string;\r\n    expanded?: boolean;\r\n    children?: INode[];\r\n    checked?: boolean;\r\n    checkedUndetermined?: boolean;\r\n    // auto\r\n    parentNodeId?: any;\r\n    nextNodeId?: any;\r\n    prevNodeId?: any;\r\n    depth?: number;\r\n}\r\n\r\nexport class Tree<T extends INode = INode, P extends ITreeProps<T> = ITreeProps<T>> extends Grid<T, P> {\r\n\r\n    protected head: HeadTree<T, IHeadTreeProps<T>, Tree<T>>;\r\n    protected view: ViewTree<T, IViewTreeProps<T>, Tree<T>>;\r\n\r\n    public setCheck(node: T, checked: boolean, params?: any): void {\r\n        if (this.props.syncCheckbox) {\r\n            this.cascadeBefore(node, (child: T) => {\r\n                if (child.leaf) {\r\n                    child.checked = checked;\r\n                }\r\n            });\r\n\r\n            this.updateUndeterminedState();\r\n        } else {\r\n            node.checked = checked;\r\n        }\r\n\r\n        this.refresh();\r\n        this.emit(\"checkchange\", this, node, checked, params);\r\n    }\r\n\r\n    public expand(node: T): void {\r\n        node.expanded = true;\r\n        this.refresh();\r\n    }\r\n\r\n    public collapse(node: T): void {\r\n        node.expanded = false;\r\n        this.refresh();\r\n    }\r\n\r\n    public getChecked(): T[] {\r\n        let checked: T[] = [];\r\n\r\n        this.cascadeBefore([] as any, (node: T) => {\r\n            if (node.data.checked) {\r\n                checked.push(node);\r\n            }\r\n        });\r\n\r\n        return checked;\r\n    }\r\n\r\n    // сначала вызывается fn узла, а потом его потомков\r\n    public cascadeBefore(node: T, fn: (node: T) => any): void {\r\n        if (fn(node) === false) {\r\n            return;\r\n        }\r\n\r\n        if (node.children) {\r\n            node.children.forEach((child: T) => {\r\n                this.cascadeBefore(child, fn);\r\n            });\r\n        }\r\n    }\r\n\r\n    // сначала вызывается fn потомков, а потом узла\r\n    public cascadeAfter(node: T, fn: (node: T) => any): void {\r\n        if (node.children) {\r\n            node.children.forEach((child: T) => {\r\n                this.cascadeAfter(child, fn);\r\n            });\r\n        }\r\n\r\n        fn(node);\r\n    }\r\n\r\n    // обновляет все узлы на состояние \"не определен\"\r\n    public updateUndeterminedState(): void {\r\n        let root: T = this.getData()[0];\r\n\r\n        this.cascadeAfter(root, (node: T) => {\r\n            if (node.leaf) {\r\n                node.checkedUndetermined = false;\r\n            } else {\r\n                if (node.children.length > 0) {\r\n                    // кол-во чекнутых дочерних элементов\r\n                    let countChecked: number = 0;\r\n                    // был ли хотябы один дечерний элемент в состоянии \"не определен\"\r\n                    let isUndetermined: boolean = false;\r\n\r\n                    node.children.forEach((child) => {\r\n                        if (child.checkedUndetermined) {\r\n                            isUndetermined = true;\r\n                        } else {\r\n                            if (child.checked) {\r\n                                ++countChecked;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if (countChecked === node.children.length) {\r\n                        node.checked = true;\r\n                        node.checkedUndetermined = false;\r\n                    } else {\r\n                        if (isUndetermined || countChecked > 0) {\r\n                            node.checked = true;\r\n                            node.checkedUndetermined = true;\r\n                        } else {\r\n                            node.checked = false;\r\n                            node.checkedUndetermined = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    node.checkedUndetermined = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // --------------------------------------------------------\r\n    // приватные методы\r\n\r\n    protected beforeInit(): void {\r\n        super.beforeInit();\r\n\r\n        this.props.rootVisible = this.props.rootVisible !== false;\r\n        this.props.syncCheckbox = !!this.props.syncCheckbox;\r\n\r\n        // ------------------------------------------\r\n\r\n        function cellMouseDown_Tree(\r\n            tree: Tree<T>,\r\n            td: HTMLTableCellElement,\r\n            columnIndex: number,\r\n            node: T,\r\n            tr: HTMLTableRowElement,\r\n            rowIndex: number,\r\n            event: MouseEvent,\r\n            column: IColumn<T, Tree<T>>\r\n        ) {\r\n            if (column && column.xtype === \"treecolumn\") {\r\n                let action: string = tree.findAction(event.target as HTMLElement, td);\r\n\r\n                switch (action) {\r\n                    case \"expand\":\r\n                        if (node.expanded) {\r\n                            tree.collapse(node);\r\n                        } else {\r\n                            tree.expand(node);\r\n                        }\r\n                        return false;\r\n                    case \"check\":\r\n                        tree.setCheck(node, !node.checked);\r\n                        return false;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        function itemDblClick_Tree(tree: Tree<T>, node: T) {\r\n            if (!node.leaf) {\r\n                node.expanded = !node.expanded;\r\n            }\r\n\r\n            tree.refresh();\r\n        }\r\n\r\n        this.on(\"onCellMouseDown\", cellMouseDown_Tree);\r\n        this.on(\"onItemdblClick\", itemDblClick_Tree);\r\n    }\r\n\r\n    protected findAction(node: HTMLElement, root: HTMLElement): string {\r\n        while (node && node !== root) {\r\n            let action: string = node.getAttribute(\"action\");\r\n\r\n            if (action) {\r\n                return action;\r\n            }\r\n\r\n            node = node.parentNode as HTMLElement;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    protected initHead(): void {\r\n        this.head = new HeadTree<T, IHeadTreeProps<T>, Tree<T>>({\r\n            columns: this.props.columns\r\n        }, this);\r\n    }\r\n\r\n    protected initView(): void {\r\n        this.view = new ViewTree<T, IViewTreeProps<T>, Tree<T>>({\r\n            data: this.props.data,\r\n            getId: this.props.getId,\r\n\r\n            columns: [],\r\n\r\n            multiSelect: this.props.multiSelect,\r\n            emptyRowText: this.props.emptyRowText,\r\n\r\n            bufferEnable: this.props.bufferEnable,\r\n            bufferHeight: this.props.bufferHeight,\r\n            bufferStock: this.props.bufferStock,\r\n            bufferScrollMin: this.props.bufferScrollMin\r\n        }, this);\r\n    }\r\n}\r\n","\r\nimport { IHashMap } from \"core\";\r\nimport { ViewGrid, IViewProps } from \"./../../grid/viewgrid/viewgrid\";\r\nimport { Tree, INode } from \"./../tree\";\r\n\r\nexport interface IViewTreeProps<T> extends IViewProps<T> { }\r\n\r\nexport class ViewTree<\r\n        T extends INode = INode,\r\n        P extends IViewTreeProps<T> = IViewTreeProps<T>,\r\n        R extends Tree<T> = Tree<T>\r\n    > extends ViewGrid<T, P, R> {\r\n\r\n    public loadData(data: T[]): void {\r\n        this.rawList = data;\r\n        this.rawHash = {};\r\n\r\n        if (data.length > 0) {\r\n            this.initNodes(this.rawHash, null, [data[0]], 0);\r\n        }\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    // преобразует дерево в список\r\n    public updateListRender(): void {\r\n        let tree: R = this.parent;\r\n        let root: T = this.rawList[0];\r\n        let nodeList: T[];\r\n\r\n        if (root) {\r\n            if (tree.props.rootVisible) {\r\n                nodeList = [root];\r\n            } else {\r\n                nodeList = root.children as T[] || [];\r\n            }\r\n        } else {\r\n            nodeList = [];\r\n        }\r\n\r\n        let list: T[] = [];\r\n\r\n        nodeList.forEach((node) => {\r\n            tree.cascadeBefore(node, (n: T) => {\r\n                if (this.filterNode(n)) {\r\n                    list.push(n);\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        });\r\n\r\n        this.dataList = list;\r\n    }\r\n\r\n    public filterNode(node: T): boolean {\r\n        if (node.parentNodeId === null) {\r\n            return true;\r\n        }\r\n\r\n        let parent: T = this.getRowById(node.parentNodeId);\r\n        return parent.expanded;\r\n    }\r\n\r\n    public scrollBy(node: T, isTop: boolean = true): void {\r\n        let tree: R = this.parent;\r\n        let parent: T = node.parentNode as T;\r\n\r\n        while (parent/* && !parent.isRoot()*/) {\r\n            if (!parent.expanded) {\r\n                tree.expand(parent);\r\n            }\r\n\r\n            parent = parent.parentNode as T;\r\n        }\r\n\r\n        this.updateListRender();\r\n\r\n        super.scrollBy(node, isTop);\r\n    }\r\n\r\n    private initNodes(hash: IHashMap<T>, parent: T, children: T[], depth: number): void {\r\n        let getId: (item: T) => any = this.props.getId;\r\n        let parentNodeId: any = parent ? getId(parent) : null;\r\n\r\n        children.forEach((child: T, index: number) => {\r\n            let first: boolean = index === 0;\r\n            let last: boolean = children.length - 1 === index;\r\n            let id: any = getId(child);\r\n\r\n            if (hash.hasOwnProperty(id)) {\r\n                console.error(`two nodes with same id: ${id}`);\r\n                console.error(hash[id], child);\r\n            } else {\r\n                hash[id] = child;\r\n            }\r\n\r\n            child.parentNodeId = parentNodeId;\r\n            child.prevNodeId = first ? null : getId(children[index - 1]);\r\n            child.nextNodeId = last ? null : getId(children[index + 1]);\r\n\r\n            child.expanded = child.expanded !== false;\r\n            // icon\r\n            // checked\r\n            // checkedUndetermined\r\n            child.depth = depth;\r\n\r\n            if (Array.isArray(child.children)) {\r\n                child.leaf = false;\r\n\r\n                this.initNodes(hash, child, child.children as T[], depth + 1);\r\n            } else {\r\n                child.leaf = child.leaf !== false;\r\n            }\r\n        });\r\n    }\r\n}\r\n","\r\nimport { event, IHashMapAny } from \"core\";\r\n\r\n// ищет родительский узел по имени тега\r\nexport function findParentNode(node: Node, parentName: string, root: Node): Node {\r\n    while (node && node !== root) {\r\n        if ((node.nodeName || \"\").toLowerCase() === parentName) {\r\n            return node;\r\n        }\r\n\r\n        node = node.parentNode;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n// -------------------------------\r\n\r\n// из списка формирует ключ-значение\r\ntype FnCb<T> = (item: T, index: number, array: T[]) => any;\r\n\r\nexport function arrayToObject<T>(array: T[], getKey?: FnCb<T>, getVal?: FnCb<T>): IHashMapAny {\r\n    let result = {};\r\n\r\n    if (!getKey) {\r\n        getKey = (item) => item;\r\n    }\r\n\r\n    if (!getVal) {\r\n        getVal = (item) => item;\r\n    }\r\n\r\n    array.forEach((item: T, i: number) => {\r\n        result[getKey(item, i, array)] = getVal(item, i, array);\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n// -------------------------------\r\n\r\nlet div: HTMLDivElement = null;\r\nlet cacheScrollbarSize: number = null;\r\n\r\nexport function injectScrollbarInfo(): void {\r\n    if (div === null) {\r\n        div = document.createElement(\"div\");\r\n        div.setAttribute(\"class\", \"ngrid-info-scroll\");\r\n        div.innerHTML = [\r\n            `<div class=\"ngrid-info-scroll-child\"></div>`,\r\n            `<iframe src=\"\" class=\"ngrid-info-scroll-iframe\"></iframe>`\r\n        ].join(\"\");\r\n\r\n        document.body.appendChild(div);\r\n\r\n        event.on((div.children[1] as any).contentWindow as any, {\r\n            resize: () => {\r\n                cacheScrollbarSize = null;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function getScrollbarSize(): number {\r\n    if (cacheScrollbarSize === null) {\r\n        initScrollbarSize();\r\n    }\r\n\r\n    return cacheScrollbarSize;\r\n}\r\n\r\nfunction initScrollbarSize(): void {\r\n    let main: ClientRect = div.getBoundingClientRect();\r\n    let child: ClientRect = div.children[0].getBoundingClientRect();\r\n\r\n    cacheScrollbarSize = main.width - child.width;\r\n}\r\n\r\n// -------------------------------\r\n\r\nexport interface ICoord {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface ISize {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport function correctionCoordinate(coord: ICoord, size: ISize): ICoord {\r\n    let margin: number = 5;\r\n\r\n    let bodyWidth: number = document.body.offsetWidth;\r\n    let bodyHeight: number = document.body.offsetHeight;\r\n\r\n    let endX: number = size.width + coord.x + margin;\r\n    let endY: number = size.height + coord.y + margin;\r\n\r\n    let needCorrectX: boolean = endX > bodyWidth;\r\n    let needCorrectY: boolean = endY > bodyHeight;\r\n\r\n    if (needCorrectX) {\r\n        if (needCorrectY) {\r\n            return {\r\n                x: coord.x - size.width - margin,\r\n                y: coord.y - size.height - margin\r\n            };\r\n        } else {\r\n            return {\r\n                x: coord.x - (endX - bodyWidth),\r\n                y: coord.y + margin\r\n            };\r\n        }\r\n    } else {\r\n        if (needCorrectY) {\r\n            return {\r\n                x: coord.x + margin,\r\n                y: coord.y - (endY - bodyHeight)\r\n            };\r\n        } else {\r\n            return {\r\n                x: coord.x + margin,\r\n                y: coord.y + margin\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// -------------------------------\r\n\r\nexport function getDecl(titles: string[], count: number): string {\r\n    let cases: number[] = [2, 0, 1, 1, 1, 2];\r\n    return titles[(count % 100 > 4 && count % 100 < 20) ? 2 : cases[(count % 10 < 5) ? count % 10 : 5]];\r\n}\r\n\r\n// -------------------------------\r\n\r\nexport function isNumber(value: any): boolean {\r\n    return typeof value === \"number\" && isFinite(value);\r\n}\r\n\r\n// -------------------------------\r\n\r\nexport function reedProperty(object: IHashMapAny, property: string): any {\r\n    return object[property];\r\n}\r\n\r\nexport function writeProperty(object: IHashMapAny, property: string, value: any): void {\r\n    object[property] = value;\r\n}\r\n"],"sourceRoot":""}